/*****************************************************************************/
//	USCI.c
//  
//	 Created on:
//	     Author:
//
/*****************************************************************************/


/*****************************************************************************/
//	Includes
/*****************************************************************************/
#include <USCI.h>
#include <gpio.h>
/*****************************************************************************/
//	End Includes


/*****************************************************************************/
//	Defines
/*****************************************************************************/
// Put the #define below in the config.h file if you want to base the register
// aliases off of TI's register names in the device-specific include file
//#define __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__

// Must include one of the following in config.h to enable use of its
// corresponding library
/*
#define __USING_USCI_A0__
#define __USING_USCI_A1__
#define __USING_USCI_A2__
#define __USING_USCI_A3__
#define __USING_USCI_B0__
#define __USING_USCI_B1__
#define __USING_USCI_B2__
#define __USING_USCI_B3__
#define __USING_USCI_AB0__
#define __USING_USCI_AB1__
#define __USING_USCI_AB2__
#define __USING_USCI_AB3__
*/

/*****************************************************************************/
/*                                                                           */
/*	Base address and bit definitions needed by USCI peripherals				 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI__) || \
	defined (__MSP430_HAS_USCI_A0__) || \
	defined (__MSP430_HAS_USCI_A1__) || \
	defined (__MSP430_HAS_USCI_A2__) || \
	defined (__MSP430_HAS_USCI_A3__) || \
	defined (__MSP430_HAS_USCI_B0__) || \
	defined (__MSP430_HAS_USCI_B1__) || \
	defined (__MSP430_HAS_USCI_B2__) || \
	defined (__MSP430_HAS_USCI_B3__) || \
	defined (__MSP430_HAS_USCI_AB0__) || \
	defined (__MSP430_HAS_USCI_AB1__) || \
	defined (__MSP430_HAS_USCI_AB2__) || \
	defined (__MSP430_HAS_USCI_AB3__)

#if defined (__MSP430G2553)
#define USCI_INTERRUPT_CONTROL_BASE_ADDRESS								0x00
#define USCI_PERIPHERAL_CONTROL_BASE_ADDRESS							0x5D
#define USCI_PORT_BASE_ADDRESS											0x20

#define USCI_TX_PIN														0x04
#define USCI_RX_PIN														0x02

#define USCI_RX_IE_BIT													0x01
#define USCI_TX_IE_BIT													0x02
#define USCI_BUSY_FLAG													0x01
#define USCI_RX_INTERRUPT_FLAG											0x01
#define USCI_TX_INTERRUPT_FLAG											0x02

#elif defined (__MSP430F2112)
#define USCI_INTERRUPT_CONTROL_BASE_ADDRESS								0x01
#define USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS							0x5D
#define USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS							0x68
#define USCI_PORT_BASE_ADDRESS											0x20


#define USCI_TX_PIN														0x04
#define USCI_RX_PIN														0x02

#define USCI_RX_IE_BIT													0x01
#define USCI_TX_IE_BIT													0x02
#define USCI_BUSY_FLAG													0x01
#define USCI_RX_INTERRUPT_FLAG											0x01
#define USCI_TX_INTERRUPT_FLAG											0x02

#elif defined (__MSP430F2618__)
#define USCI_A0_INTERRUPT_CONTROL_BASE_ADDRESS							0x00
#define USCI_B0_INTERRUPT_CONTROL_BASE_ADDRESS							0x00
#define USCI_A1_INTERRUPT_CONTROL_BASE_ADDRESS							0x00
#define USCI_B1_INTERRUPT_CONTROL_BASE_ADDRESS							0x00
#define USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS							0x5D
#define USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS							0x68
#define USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS							0xCD
#define USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS							0xD8
#define USCI_A0_PORT_CONTROL_BASE_ADDRESS								0x18 // PORT3_CONTROL_BASE_ADDRESS
#define USCI_B0_PORT_CONTROL_BASE_ADDRESS								0x30 // PORT3_CONTROL_BASE_ADDRESS
#define USCI_A1_PORT_CONTROL_BASE_ADDRESS								0x18 // PORT3_CONTROL_BASE_ADDRESS
#define USCI_B1_PORT_CONTROL_BASE_ADDRESS								0x30 // PORT3_CONTROL_BASE_ADDRESS


#define USCI_A0_TX_PIN													0x10 // P3.4
#define USCI_A0_RX_PIN													0x20 // P3.5
#define USCI_A0_CLK_PIN													0x01 // P3.0
#define USCI_A0_SOMI_PIN												0x20 // P3.5
#define USCI_A0_SIMO_PIN												0x10 // P3.4
#define USCI_A0_STE_PIN													0x08 // P3.3

#define USCI_B0_SCL_PIN													0x04 // P3.2
#define USCI_B0_SDA_PIN													0x02 // P3.1
#define USCI_B0_CLK_PIN													0x08 // P3.3
#define USCI_B0_SOMI_PIN												0x04 // P3.2
#define USCI_B0_SIMO_PIN												0x02 // P3.1
#define USCI_B0_STE_PIN													0x01 // P3.0

#define USCI_A1_TX_PIN													0x40 // P3.6
#define USCI_A1_RX_PIN													0x80 // P3.7
#define USCI_A1_CLK_PIN													0x01 // P5.0
#define USCI_A1_SOMI_PIN												0x80 // P3.7
#define USCI_A1_SIMO_PIN												0x40 // P3.6
#define USCI_A1_STE_PIN													0x08 // P5.3

#define USCI_B1_SCL_PIN													0x04 // P5.2
#define USCI_B1_SDA_PIN													0x02 // P5.1
#define USCI_B1_CLK_PIN													0x08 // P5.3
#define USCI_B1_SOMI_PIN												0x04 // P5.2
#define USCI_B1_SIMO_PIN												0x02 // P5.1
#define USCI_B1_STE_PIN													0x01 // P5.0

#define USCI_A0_RX_IE_BIT												0x01
#define USCI_A0_TX_IE_BIT												0x02
#define USCI_A0_BUSY_FLAG												0x01
#define USCI_A0_RX_INTERRUPT_FLAG										0x01
#define USCI_A0_TX_INTERRUPT_FLAG										0x02

#define USCI_B0_RX_IE_BIT												0x01
#define USCI_B0_TX_IE_BIT												0x02
#define USCI_B0_BUSY_FLAG												0x01
#define USCI_B0_RX_INTERRUPT_FLAG										0x01
#define USCI_B0_TX_INTERRUPT_FLAG										0x02

#define USCI_A1_RX_IE_BIT												0x01
#define USCI_A1_TX_IE_BIT												0x02
#define USCI_A1_BUSY_FLAG												0x01
#define USCI_A1_RX_INTERRUPT_FLAG										0x01
#define USCI_A1_TX_INTERRUPT_FLAG										0x02

#define USCI_B1_RX_IE_BIT												0x01
#define USCI_B1_TX_IE_BIT												0x02
#define USCI_B1_BUSY_FLAG												0x01
#define USCI_B1_RX_INTERRUPT_FLAG										0x01
#define USCI_B1_TX_INTERRUPT_FLAG										0x02

#elif defined (__MSP430F5438A__) || defined (__MSP430F5438__)

/*
000005c0   UCA0CTLW0
000005c0   UCA0CTLW0_L
000005c1   UCA0CTLW0_H
000005c6   UCA0BRW
000005c6   UCA0BRW_L
000005c7   UCA0BRW_H
000005c8   UCA0MCTL
000005ca   UCA0STAT
000005cc   UCA0RXBUF
000005ce   UCA0TXBUF
000005d0   UCA0ABCTL
000005d2   UCA0IRCTL
000005d2   UCA0IRCTL_L
000005d3   UCA0IRCTL_H
000005dc   UCA0ICTL
000005dc   UCA0ICTL_L
000005dd   UCA0ICTL_H
000005de   UCA0IV

000005e0   UCB0CTLW0
000005e0   UCB0CTLW0_L
000005e1   UCB0CTLW0_H
000005e6   UCB0BRW
000005e6   UCB0BRW_L
000005e7   UCB0BRW_H
000005ea   UCB0STAT
000005ec   UCB0RXBUF
000005ee   UCB0TXBUF
000005f0   UCB0I2COA
000005f0   UCB0I2COA_L
000005f1   UCB0I2COA_H
000005f2   UCB0I2CSA
000005f2   UCB0I2CSA_L
000005f3   UCB0I2CSA_H
000005fc   UCB0ICTL
000005fc   UCB0ICTL_L
000005fd   UCB0ICTL_H
000005fe   UCB0IV

00000600   UCA1CTLW0
00000600   UCA1CTLW0_L
00000601   UCA1CTLW0_H
00000606   UCA1BRW
00000606   UCA1BRW_L
00000607   UCA1BRW_H
00000608   UCA1MCTL
0000060a   UCA1STAT
0000060c   UCA1RXBUF
0000060e   UCA1TXBUF
00000610   UCA1ABCTL
00000612   UCA1IRCTL
00000612   UCA1IRCTL_L
00000613   UCA1IRCTL_H
0000061c   UCA1ICTL
0000061c   UCA1ICTL_L
0000061d   UCA1ICTL_H
0000061e   UCA1IV

00000620   UCB1CTLW0
00000620   UCB1CTLW0_L
00000621   UCB1CTLW0_H
00000626   UCB1BRW
00000626   UCB1BRW_L
00000627   UCB1BRW_H
0000062a   UCB1STAT
0000062c   UCB1RXBUF
0000062e   UCB1TXBUF
00000630   UCB1I2COA
00000630   UCB1I2COA_L
00000631   UCB1I2COA_H
00000632   UCB1I2CSA
00000632   UCB1I2CSA_L
00000633   UCB1I2CSA_H
0000063c   UCB1ICTL
0000063c   UCB1ICTL_L
0000063d   UCB1ICTL_H
0000063e   UCB1IV

00000640   UCA2CTLW0
00000640   UCA2CTLW0_L
00000641   UCA2CTLW0_H
00000646   UCA2BRW
00000646   UCA2BRW_L
00000647   UCA2BRW_H
00000648   UCA2MCTL
0000064a   UCA2STAT
0000064c   UCA2RXBUF
0000064e   UCA2TXBUF
00000650   UCA2ABCTL
00000652   UCA2IRCTL
00000652   UCA2IRCTL_L
00000653   UCA2IRCTL_H
0000065c   UCA2ICTL
0000065c   UCA2ICTL_L
0000065d   UCA2ICTL_H
0000065e   UCA2IV

00000660   UCB2CTLW0
00000660   UCB2CTLW0_L
00000661   UCB2CTLW0_H
00000666   UCB2BRW
00000666   UCB2BRW_L
00000667   UCB2BRW_H
0000066a   UCB2STAT
0000066c   UCB2RXBUF
0000066e   UCB2TXBUF
00000670   UCB2I2COA
00000670   UCB2I2COA_L
00000671   UCB2I2COA_H
00000672   UCB2I2CSA
00000672   UCB2I2CSA_L
00000673   UCB2I2CSA_H
0000067c   UCB2ICTL
0000067c   UCB2ICTL_L
0000067d   UCB2ICTL_H
0000067e   UCB2IV

00000680   UCA3CTLW0
00000680   UCA3CTLW0_L
00000681   UCA3CTLW0_H
00000686   UCA3BRW
00000686   UCA3BRW_L
00000687   UCA3BRW_H
00000688   UCA3MCTL
0000068a   UCA3STAT
0000068c   UCA3RXBUF
0000068e   UCA3TXBUF
00000690   UCA3ABCTL
00000692   UCA3IRCTL
00000692   UCA3IRCTL_L
00000693   UCA3IRCTL_H
0000069c   UCA3ICTL
0000069c   UCA3ICTL_L
0000069d   UCA3ICTL_H
0000069e   UCA3IV

000006a0   UCB3CTLW0
000006a0   UCB3CTLW0_L
000006a1   UCB3CTLW0_H
000006a6   UCB3BRW
000006a6   UCB3BRW_L
000006a7   UCB3BRW_H
000006aa   UCB3STAT
000006ac   UCB3RXBUF
000006ae   UCB3TXBUF
000006b0   UCB3I2COA
000006b0   UCB3I2COA_L
000006b1   UCB3I2COA_H
000006b2   UCB3I2CSA
000006b2   UCB3I2CSA_L
000006b3   UCB3I2CSA_H
000006bc   UCB3ICTL
000006bc   UCB3ICTL_L
000006bd   UCB3ICTL_H
000006be   UCB3IV
*/

#define USCI_A0_INTERRUPT_CONTROL_BASE_ADDRESS							(&UCA0ICTL)
#define USCI_A1_INTERRUPT_CONTROL_BASE_ADDRESS							(&UCA1ICTL)
#define USCI_A2_INTERRUPT_CONTROL_BASE_ADDRESS							(&UCA2ICTL)
#define USCI_A3_INTERRUPT_CONTROL_BASE_ADDRESS							(&UCA3ICTL)
#define USCI_B0_INTERRUPT_CONTROL_BASE_ADDRESS							(&UCB0ICTL)
#define USCI_B1_INTERRUPT_CONTROL_BASE_ADDRESS							(&UCB1ICTL)
#define USCI_B2_INTERRUPT_CONTROL_BASE_ADDRESS							(&UCB2ICTL)
#define USCI_B3_INTERRUPT_CONTROL_BASE_ADDRESS							(&UCB3ICTL)
#define USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS							(&UCA0CTLW0)
#define USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS							(&UCA1CTLW0)
#define USCI_A2_PERIPHERAL_CONTROL_BASE_ADDRESS							(&UCA2CTLW0)
#define USCI_A3_PERIPHERAL_CONTROL_BASE_ADDRESS							(&UCA3CTLW0)
#define USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS							(&UCB0CTLW0)
#define USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS							(&UCB1CTLW0)
#define USCI_B2_PERIPHERAL_CONTROL_BASE_ADDRESS							(&UCB2CTLW0)
#define USCI_B3_PERIPHERAL_CONTROL_BASE_ADDRESS							(&UCB3CTLW0)
#define USCI_A0_PORT_CONTROL_BASE_ADDRESS								0x18 // PORT3_CONTROL_BASE_ADDRESS
#define USCI_A1_PORT_CONTROL_BASE_ADDRESS								0x18 // PORT3_CONTROL_BASE_ADDRESS
#define USCI_A2_PORT_CONTROL_BASE_ADDRESS								0x
#define USCI_A3_PORT_CONTROL_BASE_ADDRESS								0x
#define USCI_B0_PORT_CONTROL_BASE_ADDRESS								0x30 // PORT3_CONTROL_BASE_ADDRESS
#define USCI_B1_PORT_CONTROL_BASE_ADDRESS								0x30 // PORT3_CONTROL_BASE_ADDRESS
#define USCI_B2_PORT_CONTROL_BASE_ADDRESS								0x
#define USCI_B3_PORT_CONTROL_BASE_ADDRESS								0x

/* TODO:
 * Verify all pin mapping
 *
 * 2013-04-17 - IO pins have been verified
 * 2013-04-17 - Flag positions are verified
 */
#define USCI_A0_TX_PIN													0x10 // P3.4
#define USCI_A0_RX_PIN													0x20 // P3.5
#define USCI_A0_CLK_PIN													0x01 // P3.0
#define USCI_A0_SOMI_PIN												0x20 // P3.5
#define USCI_A0_SIMO_PIN												0x10 // P3.4
#define USCI_A0_STE_PIN													0x08 // P3.3

#define USCI_A1_TX_PIN													0x40 // P5.6
#define USCI_A1_RX_PIN													0x80 // P5.7
#define USCI_A1_CLK_PIN													0x40 // P3.6
#define USCI_A1_SOMI_PIN												0x80 // P5.7
#define USCI_A1_SIMO_PIN												0x40 // P5.6
#define USCI_A1_STE_PIN													0x20 // P5.5

#define USCI_A2_TX_PIN													0x10 // P9.4
#define USCI_A2_RX_PIN													0x20 // P9.5
#define USCI_A2_CLK_PIN													0x01 // P9.0
#define USCI_A2_SOMI_PIN												0x20 // P9.5
#define USCI_A2_SIMO_PIN												0x10 // P9.4
#define USCI_A2_STE_PIN													0x08 // P9.3

#define USCI_A3_TX_PIN													0x10 // P10.4
#define USCI_A3_RX_PIN													0x20 // P10.5
#define USCI_A3_CLK_PIN													0x01 // P10.0
#define USCI_A3_SOMI_PIN												0x20 // P10.5
#define USCI_A3_SIMO_PIN												0x10 // P10.4
#define USCI_A3_STE_PIN													0x08 // P10.3

#define USCI_B0_SCL_PIN													0x04 // P3.2
#define USCI_B0_SDA_PIN													0x02 // P3.1
#define USCI_B0_CLK_PIN													0x08 // P3.3
#define USCI_B0_SOMI_PIN												0x04 // P3.2
#define USCI_B0_SIMO_PIN												0x02 // P3.1
#define USCI_B0_STE_PIN													0x01 // P3.0

#define USCI_B1_SCL_PIN													0x10 // P5.4
#define USCI_B1_SDA_PIN													0x80 // P3.7
#define USCI_B1_CLK_PIN													0x20 // P5.5
#define USCI_B1_SOMI_PIN												0x10 // P5.4
#define USCI_B1_SIMO_PIN												0x80 // P3.7
#define USCI_B1_STE_PIN													0x40 // P3.6

#define USCI_B2_SCL_PIN													0x04 // P9.2
#define USCI_B2_SDA_PIN													0x02 // P9.1
#define USCI_B2_CLK_PIN													0x08 // P9.3
#define USCI_B2_SOMI_PIN												0x04 // P9.2
#define USCI_B2_SIMO_PIN												0x02 // P9.1
#define USCI_B2_STE_PIN													0x01 // P9.0

#define USCI_B3_SCL_PIN													0x04 // P10.2
#define USCI_B3_SDA_PIN													0x02 // P10.1
#define USCI_B3_CLK_PIN													0x08 // P10.3
#define USCI_B3_SOMI_PIN												0x04 // P10.2
#define USCI_B3_SIMO_PIN												0x02 // P10.1
#define USCI_B3_STE_PIN													0x01 // P10.0

#define USCI_A0_BUSY_FLAG												0x01
#define USCI_A0_RX_IE_BIT												0x01
#define USCI_A0_TX_IE_BIT												0x02
#define USCI_A0_RX_INTERRUPT_FLAG										0x01
#define USCI_A0_TX_INTERRUPT_FLAG										0x02

#define USCI_A1_BUSY_FLAG												0x01
#define USCI_A1_RX_IE_BIT												0x01
#define USCI_A1_TX_IE_BIT												0x02
#define USCI_A1_RX_INTERRUPT_FLAG										0x01
#define USCI_A1_TX_INTERRUPT_FLAG										0x02

#define USCI_A2_BUSY_FLAG												0x01
#define USCI_A2_RX_IE_BIT												0x01
#define USCI_A2_TX_IE_BIT												0x02
#define USCI_A2_RX_INTERRUPT_FLAG										0x01
#define USCI_A2_TX_INTERRUPT_FLAG										0x02

#define USCI_A3_BUSY_FLAG												0x01
#define USCI_A3_RX_IE_BIT												0x01
#define USCI_A3_TX_IE_BIT												0x02
#define USCI_A3_RX_INTERRUPT_FLAG										0x01
#define USCI_A3_TX_INTERRUPT_FLAG										0x02

#define USCI_B0_BUSY_FLAG												0x01
#define USCI_B0_RX_IE_BIT												0x01
#define USCI_B0_TX_IE_BIT												0x02
#define USCI_B0_RX_INTERRUPT_FLAG										0x01
#define USCI_B0_TX_INTERRUPT_FLAG										0x02

#define USCI_B1_BUSY_FLAG												0x01
#define USCI_B1_RX_IE_BIT												0x01
#define USCI_B1_TX_IE_BIT												0x02
#define USCI_B1_RX_INTERRUPT_FLAG										0x01
#define USCI_B1_TX_INTERRUPT_FLAG										0x02

#define USCI_B2_BUSY_FLAG												0x01
#define USCI_B2_RX_IE_BIT												0x01
#define USCI_B2_TX_IE_BIT												0x02
#define USCI_B2_RX_INTERRUPT_FLAG										0x01
#define USCI_B2_TX_INTERRUPT_FLAG										0x02

#define USCI_B3_BUSY_FLAG												0x01
#define USCI_B3_RX_IE_BIT												0x01
#define USCI_B3_TX_IE_BIT												0x02
#define USCI_B3_RX_INTERRUPT_FLAG										0x01
#define USCI_B3_TX_INTERRUPT_FLAG										0x02

#elif defined (__MSP430F5529)
// USCI port register addresses
#define USCI_A0_INTERRUPT_CONTROL_BASE_ADDRESS
#define USCI_B0_INTERRUPT_CONTROL_BASE_ADDRESS
#define USCI_A1_INTERRUPT_CONTROL_BASE_ADDRESS
#define USCI_B1_INTERRUPT_CONTROL_BASE_ADDRESS
#define USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS							0x5D
#define USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS							0x68
#define USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS							0xCD
#define USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS							0xD8
#define USCI_A0_PORT_CONTROL_BASE_ADDRESS
#define USCI_B0_PORT_CONTROL_BASE_ADDRESS
#define USCI_A1_PORT_CONTROL_BASE_ADDRESS
#define USCI_B1_PORT_CONTROL_BASE_ADDRESS


#define USCI_A0_TX_PIN													0x10
#define USCI_A0_RX_PIN													0x20
#define USCI_A0_CLK_PIN													0x01
#define USCI_A0_SOMI_PIN												0x20
#define USCI_A0_SIMO_PIN												0x10
#define USCI_A0_STE_PIN													0x08

#define USCI_B0_TX_PIN													0x04
#define USCI_B0_RX_PIN													0x02

#define USCI_A1_TX_PIN													0x04
#define USCI_A1_RX_PIN													0x02

#define USCI_B1_CLK_PIN													0x08
#define USCI_B1_SOMI_PIN												0x04
#define USCI_B1_SIMO_PIN												0x02
#define USCI_B1_STE_PIN													0x01
#define USCI_B1_SDA_PIN													0x02
#define USCI_B1_SCL_PIN													0x04

#define USCI_A0_RX_IE_BIT												0x01
#define USCI_A0_TX_IE_BIT												0x02
#define USCI_A0_BUSY_FLAG												0x01
#define USCI_A0_RX_INTERRUPT_FLAG										0x01
#define USCI_A0_TX_INTERRUPT_FLAG										0x02

#elif defined (__MSP430F5529)
#define USCI_INTERRUPT_CONTROL_BASE_ADDRESS								0x01
#define USCI_PERIPHERAL_CONTROL_BASE_ADDRESS							0x60
#define USCI_PORT_BASE_ADDRESS											0x20


#define USCI_TX_PIN														0x04
#define USCI_RX_PIN														0x02

#define USCI_RX_IE_BIT													0x01
#define USCI_TX_IE_BIT													0x02
#define USCI_BUSY_FLAG													0x01
#define USCI_RX_INTERRUPT_FLAG											0x01
#define USCI_TX_INTERRUPT_FLAG											0x02

#endif /* Device selection */

#endif /*	(__MSP430_HAS_USCI__) || \
			(__MSP430_HAS_USCI_A0__) || \
			(__MSP430_HAS_USCI_A1__) || \
			(__MSP430_HAS_USCI_A2__) || \
			(__MSP430_HAS_USCI_A3__) || \
			(__MSP430_HAS_USCI_B0__) || \
			(__MSP430_HAS_USCI_B1__) || \
			(__MSP430_HAS_USCI_B2__) || \
			(__MSP430_HAS_USCI_B3__) || \
			(__MSP430_HAS_USCI_AB0__) || \
			(__MSP430_HAS_USCI_AB1__) || \
			(__MSP430_HAS_USCI_AB2__) || \
			(__MSP430_HAS_USCI_AB3__) */
/*****************************************************************************/
/*                                                                           */
/*	END: Base address and bit definitions needed by USCI peripherals		 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI																	 */
/*                                                                           */
/*****************************************************************************/
#if (defined (__MSP430_HAS_USCI__) && !defined (__MSP430_HAS_USCI_AB0__)) || \
	(defined (__MSP430_HAS_USCI__) && !defined (__MSP430_HAS_USCI_AB1__)) || \
	(defined (__MSP430_HAS_USCI__) && !defined (__MSP430_HAS_USCI_A0__)) || \
	(defined (__MSP430_HAS_USCI__) && !defined (__MSP430_HAS_USCI_A1__)) || \
	(defined (__MSP430_HAS_USCI__) && !defined (__MSP430_HAS_USCI_B0__)) || \
	(defined (__MSP430_HAS_USCI__) && !defined (__MSP430_HAS_USCI_B1__))
// USCI interrupt control register addresses offsets
#define USCI_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET					0x00
#define USCI_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET						0x02

// USCI interrupt control register address resolution macros
#define USCI_INTERRUPT_ENABLE_REGISTER_ADDRESS								\
	USCI_INTERRUPT_CONTROL_BASE_ADDRESS + 									\
	USCI_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_INTERRUPT_FLAG_REGISTER_ADDRESS								\
	USCI_INTERRUPT_CONTROL_BASE_ADDRESS + 									\
	USCI_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET

// USCI interrupt control register access macros
#define USCI_INTERRUPT_ENABLE_REGISTER										\
	*((uint8_t*)USCI_INTERRUPT_ENABLE_REGISTER_ADDRESS)
#define USCI_INTERRUPT_FLAG_REGISTER										\
	*((uint8_t*)USCI_INTERRUPT_FLAG_REGISTER_ADDRESS)


// USCI peripheral control register address offsets
#define USCI_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET					0x00
#define USCI_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET					0x01
#define USCI_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_CONTROL_REGISTER_0_ADDRESS_OFFSET							0x03
#define USCI_CONTROL_REGISTER_1_ADDRESS_OFFSET							0x04
#define USCI_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET				0x05
#define USCI_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET				0x06
#define USCI_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET					0x07
#define USCI_STATUS_REGISTER_ADDRESS_OFFSET								0x08
#define USCI_RX_BUF_ADDRESS_OFFSET										0x09
#define USCI_TX_BUF_ADDRESS_OFFSET										0x0A

// USCI peripheral control register address resolution macros
#define USCI_AUTO_BAUD_CONTROL_REGISTER_ADDRESS								\
		USCI_PERIPHERAL_CONTROL_BASE_ADDRESS +								\
		USCI_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_IRDA_TX_CONTROL_REGISTER_ADDRESS								\
		USCI_PERIPHERAL_CONTROL_BASE_ADDRESS + 								\
		USCI_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_IRDA_RX_CONTROL_REGISTER_ADDRESS								\
		USCI_PERIPHERAL_CONTROL_BASE_ADDRESS + 								\
		USCI_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_CONTROL_REGISTER_0_ADDRESS										\
		USCI_PERIPHERAL_CONTROL_BASE_ADDRESS + 								\
		USCI_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_CONTROL_REGISTER_1_ADDRESS										\
		USCI_PERIPHERAL_CONTROL_BASE_ADDRESS + 								\
		USCI_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS							\
		USCI_PERIPHERAL_CONTROL_BASE_ADDRESS + 								\
		USCI_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS							\
		USCI_PERIPHERAL_CONTROL_BASE_ADDRESS + 								\
		USCI_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_MODULATION_CONTROL_REGISTER_ADDRESS							\
		USCI_PERIPHERAL_CONTROL_BASE_ADDRESS + 								\
		USCI_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_STATUS_REGISTER_ADDRESS										\
		USCI_PERIPHERAL_CONTROL_BASE_ADDRESS + 								\
		USCI_STATUS_REGISTER_ADDRESS_OFFSET
#define USCI_RX_BUF_ADDRESS													\
		USCI_PERIPHERAL_CONTROL_BASE_ADDRESS + 								\
		USCI_RX_BUF_ADDRESS_OFFSET
#define USCI_TX_BUF_ADDRESS													\
		USCI_PERIPHERAL_CONTROL_BASE_ADDRESS + 								\
		USCI_TX_BUF_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI peripheral control register access macros
#define USCI_AUTO_BAUD_CONTROL_REGISTER										\
	*((uint8_t*)USCI_AUTO_BAUD_CONTROL_REGISTER_ADDRESS)
#define USCI_IRDA_TX_CONTROL_REGISTER										\
	*((uint8_t*)USCI_IRDA_TX_CONTROL_REGISTER_ADDRESS)
#define USCI_IRDA_RX_CONTROL_REGISTER										\
	*((uint8_t*)USCI_IRDA_RX_CONTROL_REGISTER_ADDRESS)
#define USCI_CONTROL_REGISTER_0												\
	*((uint8_t*)USCI_CONTROL_REGISTER_0_ADDRESS)
#define USCI_CONTROL_REGISTER_1												\
	*((uint8_t*)USCI_CONTROL_REGISTER_1_ADDRESS)
#define USCI_BAUD_RATE_CONTROL_REGISTER_0									\
	*((uint8_t*)USCI_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS)
#define USCI_BAUD_RATE_CONTROL_REGISTER_1									\
	*((uint8_t*)USCI_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS)
#define USCI_MODULATION_CONTROL_REGISTER									\
	*((uint8_t*)USCI_MODULATION_CONTROL_REGISTER_ADDRESS)
#define USCI_STATUS_REGISTER												\
	*((uint8_t*)USCI_STATUS_REGISTER_ADDRESS)
#define USCI_RX_BUF															\
	*((uint8_t*)USCI_RX_BUF_ADDRESS)
#define USCI_TX_BUF															\
	*((uint8_t*)USCI_TX_BUF_ADDRESS)
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

// USCI port control register address offsets
#define USCI_PORT_INPUT_REGISTER_ADDRESS_OFFSET							0x00
#define USCI_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET						0x01
#define USCI_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET						0x02
#define USCI_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET				0x03
#define USCI_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET			0x04
#define USCI_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET				0x05
#define USCI_PORT_SELECT_REGISTER_ADDRESS_OFFSET						0x06
#define USCI_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET						0x21
#define USCI_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET				0x07

// USCI port control register address resolution macros
#define USCI_PORT_INPUT_REGISTER_ADDRESS									\
		USCI_PORT_BASE_ADDRESS +											\
		USCI_PORT_INPUT_REGISTER_ADDRESS_OFFSET
#define USCI_PORT_OUTPUT_REGISTER_ADDRESS									\
		USCI_PORT_BASE_ADDRESS +											\
		USCI_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET
#define USCI_PORT_DIRECTION_REGISTER_ADDRESS								\
		USCI_PORT_BASE_ADDRESS +											\
		USCI_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET
#define USCI_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS							\
		USCI_PORT_BASE_ADDRESS +											\
		USCI_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET
#define USCI_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS					\
		USCI_PORT_BASE_ADDRESS +											\
		USCI_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS							\
		USCI_PORT_BASE_ADDRESS +											\
		USCI_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_PORT_SELECT_REGISTER_ADDRESS									\
		USCI_PORT_BASE_ADDRESS +											\
		USCI_PORT_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_PORT_SELECT_REGISTER_2_ADDRESS									\
		USCI_PORT_BASE_ADDRESS +											\
		USCI_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET
#define USCI_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS							\
		USCI_PORT_BASE_ADDRESS +											\
		USCI_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI port control register access macros
#define USCI_OUT_REGISTER													\
		*((uint8_t*)USCI_PORT_OUTPUT_REGISTER_ADDRESS)
#define USCI_DIR_REGISTER													\
		*((uint8_t*)USCI_PORT_DIRECTION_REGISTER_ADDRESS)
#define USCI_SEL_REGISTER													\
		*((uint8_t*)USCI_PORT_SELECT_REGISTER_ADDRESS)
#define USCI_SEL_REGISTER_2													\
		*((uint8_t*)USCI_PORT_SELECT_REGISTER_2_ADDRESS)
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

#if defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI peripheral control register name aliases (see device-specific include)
#define USCI_CONTROL_REGISTER_0										UCA0CTL0
#define USCI_CONTROL_REGISTER_1										UCA0CTL1
#define USCI_BAUD_RATE_CONTROL_REGISTER_0							UCA0BR0
#define USCI_BAUD_RATE_CONTROL_REGISTER_1							UCA0BR1
#define USCI_MODULATION_CONTROL_REGISTER							UCA0MCTL
#define USCI_STATUS_REGISTER										UCA0STAT
#define USCI_RX_BUF													UCA0RXBUF
#define USCI_TX_BUF													UCA0TXBUF
#define USCI_AUTO_BAUD_CONTROL_REGISTER								UCA0ABCTL
#define USCI_IRDA_TX_CONTROL_REGISTER								UCA0IRTCTL
#define USCI_IRDA_RX_CONTROL_REGISTER								UCA0IRRCTL

// USCI interrupt control register name aliases
#define USCI_INTERRUPT_ENABLE_REGISTER								UC0IE
#define USCI_INTERRUPT_FLAG_REGISTER								UC0IFG

// USCI bit name aliases
#define USCI_RX_IE_BIT												UCA0RXIE
#define USCI_TX_IE_BIT												UCA0TXIE
#define USCI_BUSY_FLAG												UCBUSY
#define USCI_TX_INTERRUPT_FLAG										UCA0TXIFG
#define USCI_RX_INTERRUPT_FLAG										UCA0RXIFG

// USCI port register access name aliases
#define USCI_OUT_REGISTER												P1OUT
#define USCI_DIR_REGISTER												P1DIR
#define USCI_SEL_REGISTER												P1SEL
#define USCI_SEL_REGISTER_2												P1SEL2
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */
#endif /* __MSP430_HAS_USCI__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI																 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A0																	 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A0__) || defined (__MSP430_HAS_USCI_AB0__)
// USCI_A0 interrupt control register addresses
#define USCI_A0_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_A0_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET					0x02

// USCI_A0 interrupt control register address resolution macros
#define USCI_A0_INTERRUPT_ENABLE_REGISTER_ADDRESS							\
	USCI_A0_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_A0_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_A0_INTERRUPT_FLAG_REGISTER_ADDRESS								\
	USCI_A0_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_A0_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET

// USCI_A0 interrupt control register access macros
#define USCI_A0_INTERRUPT_ENABLE_REGISTER									\
	*((uint8_t*)USCI_A0_INTERRUPT_ENABLE_REGISTER_ADDRESS)
#define USCI_A0_INTERRUPT_FLAG_REGISTER										\
	*((uint8_t*)USCI_A0_INTERRUPT_FLAG_REGISTER_ADDRESS)


// USCI_A0 peripheral control register address offsets
#define USCI_A0_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET				(UCA0ABCTL)
#define USCI_A0_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET					0x
#define USCI_A0_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_A0_CONTROL_REGISTER_0_ADDRESS_OFFSET						0x03
#define USCI_A0_CONTROL_REGISTER_1_ADDRESS_OFFSET						0x04
#define USCI_A0_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET				0x05
#define USCI_A0_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET				0x06
#define USCI_A0_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET				0x07
#define USCI_A0_STATUS_REGISTER_ADDRESS_OFFSET							0x08
#define USCI_A0_RX_BUF_ADDRESS_OFFSET									0x09
#define USCI_A0_TX_BUF_ADDRESS_OFFSET									0x0A

// USCI_A0 peripheral control register address resolution macros
#define USCI_A0_AUTO_BAUD_CONTROL_REGISTER_ADDRESS							\
		USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS +							\
		USCI_A0_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A0_IRDA_TX_CONTROL_REGISTER_ADDRESS							\
		USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A0_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A0_IRDA_RX_CONTROL_REGISTER_ADDRESS							\
		USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A0_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A0_CONTROL_REGISTER_0_ADDRESS									\
		USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A0_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_A0_CONTROL_REGISTER_1_ADDRESS									\
		USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A0_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_A0_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS						\
		USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A0_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_A0_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS						\
		USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A0_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_A0_MODULATION_CONTROL_REGISTER_ADDRESS							\
		USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A0_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A0_STATUS_REGISTER_ADDRESS										\
		USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A0_STATUS_REGISTER_ADDRESS_OFFSET
#define USCI_A0_RX_BUF_ADDRESS												\
		USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A0_RX_BUF_ADDRESS_OFFSET
#define USCI_A0_TX_BUF_ADDRESS												\
		USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A0_TX_BUF_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_A0 peripheral control register access macros
#define USCI_A0_AUTO_BAUD_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A0_AUTO_BAUD_CONTROL_REGISTER_ADDRESS)
#define USCI_A0_IRDA_TX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A0_IRDA_TX_CONTROL_REGISTER_ADDRESS)
#define USCI_A0_IRDA_RX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A0_IRDA_RX_CONTROL_REGISTER_ADDRESS)
#define USCI_A0_CONTROL_REGISTER_0											\
	*((uint8_t*)USCI_A0_CONTROL_REGISTER_0_ADDRESS)
#define USCI_A0_CONTROL_REGISTER_1											\
	*((uint8_t*)USCI_A0_CONTROL_REGISTER_1_ADDRESS)
#define USCI_A0_BAUD_RATE_CONTROL_REGISTER_0								\
	*((uint8_t*)USCI_A0_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS)
#define USCI_A0_BAUD_RATE_CONTROL_REGISTER_1								\
	*((uint8_t*)USCI_A0_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS)
#define USCI_A0_MODULATION_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A0_MODULATION_CONTROL_REGISTER_ADDRESS)
#define USCI_A0_STATUS_REGISTER												\
	*((uint8_t*)USCI_A0_STATUS_REGISTER_ADDRESS)
#define USCI_A0_RX_BUF														\
	*((uint8_t*)USCI_A0_RX_BUF_ADDRESS)
#define USCI_A0_TX_BUF														\
	*((uint8_t*)USCI_A0_TX_BUF_ADDRESS)
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

// USCI_A0 port control register address offsets
#define USCI_A0_PORT_INPUT_REGISTER_ADDRESS_OFFSET						0x00
#define USCI_A0_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET						0x01
#define USCI_A0_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_A0_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET				0x03
#define USCI_A0_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET		0x04
#define USCI_A0_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET			0x05
#define USCI_A0_PORT_SELECT_REGISTER_ADDRESS_OFFSET						0x06
#define USCI_A0_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET					0x21
#define USCI_A0_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET			0x07

// USCI_A0 port control register address resolution macros
#define USCI_A0_PORT_INPUT_REGISTER_ADDRESS									\
		USCI_A0_PORT_BASE_ADDRESS +											\
		USCI_A0_PORT_INPUT_REGISTER_ADDRESS_OFFSET
#define USCI_A0_PORT_OUTPUT_REGISTER_ADDRESS								\
		USCI_A0_PORT_BASE_ADDRESS +											\
		USCI_A0_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET
#define USCI_A0_PORT_DIRECTION_REGISTER_ADDRESS								\
		USCI_A0_PORT_BASE_ADDRESS +											\
		USCI_A0_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET
#define USCI_A0_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS						\
		USCI_A0_PORT_BASE_ADDRESS +											\
		USCI_A0_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET
#define USCI_A0_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS					\
		USCI_A0_PORT_BASE_ADDRESS +											\
		USCI_A0_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_A0_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS						\
		USCI_A0_PORT_BASE_ADDRESS +											\
		USCI_A0_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_A0_PORT_SELECT_REGISTER_ADDRESS								\
		USCI_A0_PORT_BASE_ADDRESS +											\
		USCI_A0_PORT_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_A0_PORT_SELECT_REGISTER_2_ADDRESS								\
		USCI_A0_PORT_BASE_ADDRESS +											\
		USCI_A0_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET
#define USCI_A0_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS						\
		USCI_A0_PORT_BASE_ADDRESS +											\
		USCI_A0_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_A0 port control register access macros
#define USCI_A0_OUT_REGISTER												\
		*((uint8_t*)USCI_A0_PORT_OUTPUT_REGISTER_ADDRESS)
#define USCI_A0_DIR_REGISTER												\
		*((uint8_t*)USCI_A0_PORT_DIRECTION_REGISTER_ADDRESS)
#define USCI_A0_SEL_REGISTER												\
		*((uint8_t*)USCI_A0_PORT_SELECT_REGISTER_ADDRESS)
#define USCI_A0_SEL_REGISTER_2												\
		*((uint8_t*)USCI_A0_PORT_SELECT_REGISTER_2_ADDRESS)
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

#if defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_A0 peripheral control register name aliases (see device-specific include)
#define USCI_A0_CONTROL_REGISTER_0									UCA0CTL0
#define USCI_A0_CONTROL_REGISTER_1									UCA0CTL1
#define USCI_A0_BAUD_RATE_CONTROL_REGISTER_0						UCA0BR0
#define USCI_A0_BAUD_RATE_CONTROL_REGISTER_1						UCA0BR1
#define USCI_A0_MODULATION_CONTROL_REGISTER							UCA0MCTL
#define USCI_A0_STATUS_REGISTER										UCA0STAT
#define USCI_A0_RX_BUF												UCA0RXBUF
#define USCI_A0_TX_BUF												UCA0TXBUF
#define USCI_A0_AUTO_BAUD_CONTROL_REGISTER							UCA0ABCTL
#define USCI_A0_IRDA_TX_CONTROL_REGISTER							UCA0IRTCTL
#define USCI_A0_IRDA_RX_CONTROL_REGISTER							UCA0IRRCTL

// USCI_A0 interrupt control register name aliases
#define USCI_A0_INTERRUPT_ENABLE_REGISTER							UC0IE
#define USCI_A0_INTERRUPT_FLAG_REGISTER								UC0IFG

// USCI_A0 bit name aliases
#define USCI_A0_RX_IE_BIT											UCA0RXIE
#define USCI_A0_TX_IE_BIT											UCA0TXIE
#define USCI_A0_BUSY_FLAG											UCBUSY
#define USCI_A0_TX_INTERRUPT_FLAG									UCA0TXIFG
#define USCI_A0_RX_INTERRUPT_FLAG									UCA0RXIFG

// USCI_A0 port register access name aliases
#define USCI_A0_OUT_REGISTER										P1OUT
#define USCI_A0_DIR_REGISTER										P1DIR
#define USCI_A0_SEL_REGISTER										P1SEL
#define USCI_A0_SEL_REGISTER_2										P1SEL2
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */
#endif /* __MSP430_HAS_USCI_A0__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A0															 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A1																	 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A1__) || defined (__MSP430_HAS_USCI_AB1__)
// USCI_A1 interrupt control register addresses
#define USCI_A1_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_A1_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET					0x02

// USCI_A1 interrupt control register address resolution macros
#define USCI_A1_INTERRUPT_ENABLE_REGISTER_ADDRESS							\
	USCI_A1_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_A1_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_A1_INTERRUPT_FLAG_REGISTER_ADDRESS								\
	USCI_A1_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_A1_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET

// USCI_A1 interrupt control register access macros
#define USCI_A1_INTERRUPT_ENABLE_REGISTER									\
	*((uint8_t*)USCI_A1_INTERRUPT_ENABLE_REGISTER_ADDRESS)
#define USCI_A1_INTERRUPT_FLAG_REGISTER										\
	*((uint8_t*)USCI_A1_INTERRUPT_FLAG_REGISTER_ADDRESS)


// USCI_A1 peripheral control register address offsets
#define USCI_A1_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_A1_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET					0x01
#define USCI_A1_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_A1_CONTROL_REGISTER_0_ADDRESS_OFFSET						0x03
#define USCI_A1_CONTROL_REGISTER_1_ADDRESS_OFFSET						0x04
#define USCI_A1_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET				0x05
#define USCI_A1_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET				0x06
#define USCI_A1_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET				0x07
#define USCI_A1_STATUS_REGISTER_ADDRESS_OFFSET							0x08
#define USCI_A1_RX_BUF_ADDRESS_OFFSET									0x09
#define USCI_A1_TX_BUF_ADDRESS_OFFSET									0x0A

// USCI_A1 peripheral control register address resolution macros
#define USCI_A1_AUTO_BAUD_CONTROL_REGISTER_ADDRESS							\
		USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS +							\
		USCI_A1_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A1_IRDA_TX_CONTROL_REGISTER_ADDRESS							\
		USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A1_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A1_IRDA_RX_CONTROL_REGISTER_ADDRESS							\
		USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A1_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A1_CONTROL_REGISTER_0_ADDRESS									\
		USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A1_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_A1_CONTROL_REGISTER_1_ADDRESS									\
		USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A1_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_A1_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS						\
		USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A1_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_A1_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS						\
		USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A1_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_A1_MODULATION_CONTROL_REGISTER_ADDRESS							\
		USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A1_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A1_STATUS_REGISTER_ADDRESS										\
		USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A1_STATUS_REGISTER_ADDRESS_OFFSET
#define USCI_A1_RX_BUF_ADDRESS												\
		USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A1_RX_BUF_ADDRESS_OFFSET
#define USCI_A1_TX_BUF_ADDRESS												\
		USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A1_TX_BUF_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_A1 peripheral control register access macros
#define USCI_A1_AUTO_BAUD_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A1_AUTO_BAUD_CONTROL_REGISTER_ADDRESS)
#define USCI_A1_IRDA_TX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A1_IRDA_TX_CONTROL_REGISTER_ADDRESS)
#define USCI_A1_IRDA_RX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A1_IRDA_RX_CONTROL_REGISTER_ADDRESS)
#define USCI_A1_CONTROL_REGISTER_0											\
	*((uint8_t*)USCI_A1_CONTROL_REGISTER_0_ADDRESS)
#define USCI_A1_CONTROL_REGISTER_1											\
	*((uint8_t*)USCI_A1_CONTROL_REGISTER_1_ADDRESS)
#define USCI_A1_BAUD_RATE_CONTROL_REGISTER_0								\
	*((uint8_t*)USCI_A1_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS)
#define USCI_A1_BAUD_RATE_CONTROL_REGISTER_1								\
	*((uint8_t*)USCI_A1_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS)
#define USCI_A1_MODULATION_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A1_MODULATION_CONTROL_REGISTER_ADDRESS)
#define USCI_A1_STATUS_REGISTER												\
	*((uint8_t*)USCI_A1_STATUS_REGISTER_ADDRESS)
#define USCI_A1_RX_BUF														\
	*((uint8_t*)USCI_A1_RX_BUF_ADDRESS)
#define USCI_A1_TX_BUF														\
	*((uint8_t*)USCI_A1_TX_BUF_ADDRESS)
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

// USCI_A1 port control register address offsets
#define USCI_A1_PORT_INPUT_REGISTER_ADDRESS_OFFSET						0x00
#define USCI_A1_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET						0x01
#define USCI_A1_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_A1_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET				0x03
#define USCI_A1_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET		0x04
#define USCI_A1_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET			0x05
#define USCI_A1_PORT_SELECT_REGISTER_ADDRESS_OFFSET						0x06
#define USCI_A1_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET					0x21
#define USCI_A1_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET			0x07

// USCI_A1 port control register address resolution macros
#define USCI_A1_PORT_INPUT_REGISTER_ADDRESS									\
		USCI_A1_PORT_BASE_ADDRESS +											\
		USCI_A1_PORT_INPUT_REGISTER_ADDRESS_OFFSET
#define USCI_A1_PORT_OUTPUT_REGISTER_ADDRESS								\
		USCI_A1_PORT_BASE_ADDRESS +											\
		USCI_A1_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET
#define USCI_A1_PORT_DIRECTION_REGISTER_ADDRESS								\
		USCI_A1_PORT_BASE_ADDRESS +											\
		USCI_A1_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET
#define USCI_A1_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS						\
		USCI_A1_PORT_BASE_ADDRESS +											\
		USCI_A1_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET
#define USCI_A1_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS					\
		USCI_A1_PORT_BASE_ADDRESS +											\
		USCI_A1_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_A1_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS						\
		USCI_A1_PORT_BASE_ADDRESS +											\
		USCI_A1_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_A1_PORT_SELECT_REGISTER_ADDRESS								\
		USCI_A1_PORT_BASE_ADDRESS +											\
		USCI_A1_PORT_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_A1_PORT_SELECT_REGISTER_2_ADDRESS								\
		USCI_A1_PORT_BASE_ADDRESS +											\
		USCI_A1_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET
#define USCI_A1_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS						\
		USCI_A1_PORT_BASE_ADDRESS +											\
		USCI_A1_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_A1 port control register access macros
#define USCI_A1_OUT_REGISTER												\
		*((uint8_t*)USCI_A1_PORT_OUTPUT_REGISTER_ADDRESS)
#define USCI_A1_DIR_REGISTER												\
		*((uint8_t*)USCI_A1_PORT_DIRECTION_REGISTER_ADDRESS)
#define USCI_A1_SEL_REGISTER												\
		*((uint8_t*)USCI_A1_PORT_SELECT_REGISTER_ADDRESS)
#define USCI_A1_SEL_REGISTER_2												\
		*((uint8_t*)USCI_A1_PORT_SELECT_REGISTER_2_ADDRESS)

#else
// USCI_B0 peripheral control register name aliases (see device-specific include)
#define USCI_A1_CONTROL_REGISTER_0									UCA1CTL0
#define USCI_A1_CONTROL_REGISTER_1									UCA1CTL1
#define USCI_A1_BAUD_RATE_CONTROL_REGISTER_0						UCA1BR0
#define USCI_A1_BAUD_RATE_CONTROL_REGISTER_1						UCA1BR1
#define USCI_A1_MODULATION_CONTROL_REGISTER							UCA1MCTL
#define USCI_A1_STATUS_REGISTER										UCA1STAT
#define USCI_A1_RX_BUF												UCA1RXBUF
#define USCI_A1_TX_BUF												UCA1TXBUF
#define USCI_A1_AUTO_BAUD_CONTROL_REGISTER							UCA1ABCTL
#define USCI_A1_IRDA_TX_CONTROL_REGISTER							UCA1IRTCTL
#define USCI_A1_IRDA_RX_CONTROL_REGISTER							UCA1IRRCTL

// USCI_B0 interrupt control register name aliases
#define USCI_A1_INTERRUPT_ENABLE_REGISTER							UC1IE
#define USCI_A1_INTERRUPT_FLAG_REGISTER								UC1IFG

// USCI_B0 bit name aliases
#define USCI_A1_RX_IE_BIT											UCA1RXIE
#define USCI_A1_TX_IE_BIT											UCA1TXIE
#define USCI_A1_BUSY_FLAG											UCA1SY
#define USCI_A1_TX_INTERRUPT_FLAG									UCA1TXIFG
#define USCI_A1_RX_INTERRUPT_FLAG									UCA1RXIFG

// USCI_B0 port register access name aliases
#define USCI_A1_OUT_REGISTER										P1OUT
#define USCI_A1_DIR_REGISTER										P1DIR
#define USCI_A1_SEL_REGISTER										P1SEL
#define USCI_A1_SEL_REGISTER_2										P1SEL2
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

#endif /* __MSP430_HAS_USCI_A1__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A1															 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A2																	 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A2__) || defined (__MSP430_HAS_USCI_AB2__)
// USCI_A2 interrupt control register addresses
#define USCI_A2_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_A2_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET					0x02

// USCI_A2 interrupt control register address resolution macros
#define USCI_A2_INTERRUPT_ENABLE_REGISTER_ADDRESS							\
	USCI_A2_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_A2_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_A2_INTERRUPT_FLAG_REGISTER_ADDRESS								\
	USCI_A2_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_A2_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET

// USCI_A2 interrupt control register access macros
#define USCI_A2_INTERRUPT_ENABLE_REGISTER									\
	*((uint8_t*)USCI_A2_INTERRUPT_ENABLE_REGISTER_ADDRESS)
#define USCI_A2_INTERRUPT_FLAG_REGISTER										\
	*((uint8_t*)USCI_A2_INTERRUPT_FLAG_REGISTER_ADDRESS)


// USCI_A2 peripheral control register address offsets
#define USCI_A2_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_A2_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET					0x01
#define USCI_A2_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_A2_CONTROL_REGISTER_0_ADDRESS_OFFSET						0x03
#define USCI_A2_CONTROL_REGISTER_1_ADDRESS_OFFSET						0x04
#define USCI_A2_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET				0x05
#define USCI_A2_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET				0x06
#define USCI_A2_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET				0x07
#define USCI_A2_STATUS_REGISTER_ADDRESS_OFFSET							0x08
#define USCI_A2_RX_BUF_ADDRESS_OFFSET									0x09
#define USCI_A2_TX_BUF_ADDRESS_OFFSET									0x0A

// USCI_A2 peripheral control register address resolution macros
#define USCI_A2_AUTO_BAUD_CONTROL_REGISTER_ADDRESS							\
		USCI_A2_PERIPHERAL_CONTROL_BASE_ADDRESS +							\
		USCI_A2_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A2_IRDA_TX_CONTROL_REGISTER_ADDRESS							\
		USCI_A2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A2_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A2_IRDA_RX_CONTROL_REGISTER_ADDRESS							\
		USCI_A2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A2_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A2_CONTROL_REGISTER_0_ADDRESS									\
		USCI_A2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A2_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_A2_CONTROL_REGISTER_1_ADDRESS									\
		USCI_A2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A2_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_A2_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS						\
		USCI_A2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A2_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_A2_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS						\
		USCI_A2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A2_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_A2_MODULATION_CONTROL_REGISTER_ADDRESS							\
		USCI_A2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A2_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A2_STATUS_REGISTER_ADDRESS										\
		USCI_A2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A2_STATUS_REGISTER_ADDRESS_OFFSET
#define USCI_A2_RX_BUF_ADDRESS												\
		USCI_A2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A2_RX_BUF_ADDRESS_OFFSET
#define USCI_A2_TX_BUF_ADDRESS												\
		USCI_A2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A2_TX_BUF_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_A2 peripheral control register access macros
#define USCI_A2_AUTO_BAUD_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A2_AUTO_BAUD_CONTROL_REGISTER_ADDRESS)
#define USCI_A2_IRDA_TX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A2_IRDA_TX_CONTROL_REGISTER_ADDRESS)
#define USCI_A2_IRDA_RX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A2_IRDA_RX_CONTROL_REGISTER_ADDRESS)
#define USCI_A2_CONTROL_REGISTER_0											\
	*((uint8_t*)USCI_A2_CONTROL_REGISTER_0_ADDRESS)
#define USCI_A2_CONTROL_REGISTER_1											\
	*((uint8_t*)USCI_A2_CONTROL_REGISTER_1_ADDRESS)
#define USCI_A2_BAUD_RATE_CONTROL_REGISTER_0								\
	*((uint8_t*)USCI_A2_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS)
#define USCI_A2_BAUD_RATE_CONTROL_REGISTER_1								\
	*((uint8_t*)USCI_A2_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS)
#define USCI_A2_MODULATION_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A2_MODULATION_CONTROL_REGISTER_ADDRESS)
#define USCI_A2_STATUS_REGISTER												\
	*((uint8_t*)USCI_A2_STATUS_REGISTER_ADDRESS)
#define USCI_A2_RX_BUF														\
	*((uint8_t*)USCI_A2_RX_BUF_ADDRESS)
#define USCI_A2_TX_BUF														\
	*((uint8_t*)USCI_A2_TX_BUF_ADDRESS)
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

// USCI_A2 port control register address offsets
#define USCI_A2_PORT_INPUT_REGISTER_ADDRESS_OFFSET						0x00
#define USCI_A2_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET						0x01
#define USCI_A2_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_A2_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET				0x03
#define USCI_A2_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET		0x04
#define USCI_A2_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET			0x05
#define USCI_A2_PORT_SELECT_REGISTER_ADDRESS_OFFSET						0x06
#define USCI_A2_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET					0x21
#define USCI_A2_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET			0x07

// USCI_A2 port control register address resolution macros
#define USCI_A2_PORT_INPUT_REGISTER_ADDRESS									\
		USCI_A2_PORT_BASE_ADDRESS +											\
		USCI_A2_PORT_INPUT_REGISTER_ADDRESS_OFFSET
#define USCI_A2_PORT_OUTPUT_REGISTER_ADDRESS								\
		USCI_A2_PORT_BASE_ADDRESS +											\
		USCI_A2_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET
#define USCI_A2_PORT_DIRECTION_REGISTER_ADDRESS								\
		USCI_A2_PORT_BASE_ADDRESS +											\
		USCI_A2_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET
#define USCI_A2_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS						\
		USCI_A2_PORT_BASE_ADDRESS +											\
		USCI_A2_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET
#define USCI_A2_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS					\
		USCI_A2_PORT_BASE_ADDRESS +											\
		USCI_A2_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_A2_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS						\
		USCI_A2_PORT_BASE_ADDRESS +											\
		USCI_A2_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_A2_PORT_SELECT_REGISTER_ADDRESS								\
		USCI_A2_PORT_BASE_ADDRESS +											\
		USCI_A2_PORT_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_A2_PORT_SELECT_REGISTER_2_ADDRESS								\
		USCI_A2_PORT_BASE_ADDRESS +											\
		USCI_A2_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET
#define USCI_A2_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS						\
		USCI_A2_PORT_BASE_ADDRESS +											\
		USCI_A2_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_A2 port control register access macros
#define USCI_A2_OUT_REGISTER												\
		*((uint8_t*)USCI_A2_PORT_OUTPUT_REGISTER_ADDRESS)
#define USCI_A2_DIR_REGISTER												\
		*((uint8_t*)USCI_A2_PORT_DIRECTION_REGISTER_ADDRESS)
#define USCI_A2_SEL_REGISTER												\
		*((uint8_t*)USCI_A2_PORT_SELECT_REGISTER_ADDRESS)
#define USCI_A2_SEL_REGISTER_2												\
		*((uint8_t*)USCI_A2_PORT_SELECT_REGISTER_2_ADDRESS)

#else
// USCI_B0 peripheral control register name aliases (see device-specific include)
#define USCI_A2_CONTROL_REGISTER_0									UCA2CTL0
#define USCI_A2_CONTROL_REGISTER_1									UCA2CTL1
#define USCI_A2_BAUD_RATE_CONTROL_REGISTER_0						UCA2BR0
#define USCI_A2_BAUD_RATE_CONTROL_REGISTER_1						UCA2BR1
#define USCI_A2_MODULATION_CONTROL_REGISTER							UCA2MCTL
#define USCI_A2_STATUS_REGISTER										UCA2STAT
#define USCI_A2_RX_BUF												UCA2RXBUF
#define USCI_A2_TX_BUF												UCA2TXBUF
#define USCI_A2_AUTO_BAUD_CONTROL_REGISTER							UCA2ABCTL
#define USCI_A2_IRDA_TX_CONTROL_REGISTER							UCA2IRTCTL
#define USCI_A2_IRDA_RX_CONTROL_REGISTER							UCA2IRRCTL

// USCI_B0 interrupt control register name aliases
#define USCI_A2_INTERRUPT_ENABLE_REGISTER							UC1IE
#define USCI_A2_INTERRUPT_FLAG_REGISTER								UC1IFG

// USCI_B0 bit name aliases
#define USCI_A2_RX_IE_BIT											UCA2RXIE
#define USCI_A2_TX_IE_BIT											UCA2TXIE
#define USCI_A2_BUSY_FLAG											UCA2SY
#define USCI_A2_TX_INTERRUPT_FLAG									UCA2TXIFG
#define USCI_A2_RX_INTERRUPT_FLAG									UCA2RXIFG

// USCI_B0 port register access name aliases
#define USCI_A2_OUT_REGISTER										P1OUT
#define USCI_A2_DIR_REGISTER										P1DIR
#define USCI_A2_SEL_REGISTER										P1SEL
#define USCI_A2_SEL_REGISTER_2										P1SEL2
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

#endif /* __MSP430_HAS_USCI_A2__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A2															 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A3																	 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A3__) || defined (__MSP430_HAS_USCI_AB1__)
// USCI_A3 interrupt control register addresses
#define USCI_A3_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_A3_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET					0x02

// USCI_A3 interrupt control register address resolution macros
#define USCI_A3_INTERRUPT_ENABLE_REGISTER_ADDRESS							\
	USCI_A3_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_A3_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_A3_INTERRUPT_FLAG_REGISTER_ADDRESS								\
	USCI_A3_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_A3_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET

// USCI_A3 interrupt control register access macros
#define USCI_A3_INTERRUPT_ENABLE_REGISTER									\
	*((uint8_t*)USCI_A3_INTERRUPT_ENABLE_REGISTER_ADDRESS)
#define USCI_A3_INTERRUPT_FLAG_REGISTER										\
	*((uint8_t*)USCI_A3_INTERRUPT_FLAG_REGISTER_ADDRESS)


// USCI_A3 peripheral control register address offsets
#define USCI_A3_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_A3_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET					0x01
#define USCI_A3_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_A3_CONTROL_REGISTER_0_ADDRESS_OFFSET						0x03
#define USCI_A3_CONTROL_REGISTER_1_ADDRESS_OFFSET						0x04
#define USCI_A3_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET				0x05
#define USCI_A3_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET				0x06
#define USCI_A3_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET				0x07
#define USCI_A3_STATUS_REGISTER_ADDRESS_OFFSET							0x08
#define USCI_A3_RX_BUF_ADDRESS_OFFSET									0x09
#define USCI_A3_TX_BUF_ADDRESS_OFFSET									0x0A

// USCI_A3 peripheral control register address resolution macros
#define USCI_A3_AUTO_BAUD_CONTROL_REGISTER_ADDRESS							\
		USCI_A3_PERIPHERAL_CONTROL_BASE_ADDRESS +							\
		USCI_A3_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A3_IRDA_TX_CONTROL_REGISTER_ADDRESS							\
		USCI_A3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A3_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A3_IRDA_RX_CONTROL_REGISTER_ADDRESS							\
		USCI_A3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A3_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A3_CONTROL_REGISTER_0_ADDRESS									\
		USCI_A3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A3_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_A3_CONTROL_REGISTER_1_ADDRESS									\
		USCI_A3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A3_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_A3_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS						\
		USCI_A3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A3_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_A3_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS						\
		USCI_A3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A3_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_A3_MODULATION_CONTROL_REGISTER_ADDRESS							\
		USCI_A3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A3_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_A3_STATUS_REGISTER_ADDRESS										\
		USCI_A3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A3_STATUS_REGISTER_ADDRESS_OFFSET
#define USCI_A3_RX_BUF_ADDRESS												\
		USCI_A3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A3_RX_BUF_ADDRESS_OFFSET
#define USCI_A3_TX_BUF_ADDRESS												\
		USCI_A3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_A3_TX_BUF_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_A3 peripheral control register access macros
#define USCI_A3_AUTO_BAUD_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A3_AUTO_BAUD_CONTROL_REGISTER_ADDRESS)
#define USCI_A3_IRDA_TX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A3_IRDA_TX_CONTROL_REGISTER_ADDRESS)
#define USCI_A3_IRDA_RX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A3_IRDA_RX_CONTROL_REGISTER_ADDRESS)
#define USCI_A3_CONTROL_REGISTER_0											\
	*((uint8_t*)USCI_A3_CONTROL_REGISTER_0_ADDRESS)
#define USCI_A3_CONTROL_REGISTER_1											\
	*((uint8_t*)USCI_A3_CONTROL_REGISTER_1_ADDRESS)
#define USCI_A3_BAUD_RATE_CONTROL_REGISTER_0								\
	*((uint8_t*)USCI_A3_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS)
#define USCI_A3_BAUD_RATE_CONTROL_REGISTER_1								\
	*((uint8_t*)USCI_A3_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS)
#define USCI_A3_MODULATION_CONTROL_REGISTER									\
	*((uint8_t*)USCI_A3_MODULATION_CONTROL_REGISTER_ADDRESS)
#define USCI_A3_STATUS_REGISTER												\
	*((uint8_t*)USCI_A3_STATUS_REGISTER_ADDRESS)
#define USCI_A3_RX_BUF														\
	*((uint8_t*)USCI_A3_RX_BUF_ADDRESS)
#define USCI_A3_TX_BUF														\
	*((uint8_t*)USCI_A3_TX_BUF_ADDRESS)
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

// USCI_A3 port control register address offsets
#define USCI_A3_PORT_INPUT_REGISTER_ADDRESS_OFFSET						0x00
#define USCI_A3_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET						0x01
#define USCI_A3_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_A3_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET				0x03
#define USCI_A3_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET		0x04
#define USCI_A3_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET			0x05
#define USCI_A3_PORT_SELECT_REGISTER_ADDRESS_OFFSET						0x06
#define USCI_A3_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET					0x21
#define USCI_A3_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET			0x07

// USCI_A3 port control register address resolution macros
#define USCI_A3_PORT_INPUT_REGISTER_ADDRESS									\
		USCI_A3_PORT_BASE_ADDRESS +											\
		USCI_A3_PORT_INPUT_REGISTER_ADDRESS_OFFSET
#define USCI_A3_PORT_OUTPUT_REGISTER_ADDRESS								\
		USCI_A3_PORT_BASE_ADDRESS +											\
		USCI_A3_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET
#define USCI_A3_PORT_DIRECTION_REGISTER_ADDRESS								\
		USCI_A3_PORT_BASE_ADDRESS +											\
		USCI_A3_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET
#define USCI_A3_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS						\
		USCI_A3_PORT_BASE_ADDRESS +											\
		USCI_A3_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET
#define USCI_A3_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS					\
		USCI_A3_PORT_BASE_ADDRESS +											\
		USCI_A3_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_A3_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS						\
		USCI_A3_PORT_BASE_ADDRESS +											\
		USCI_A3_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_A3_PORT_SELECT_REGISTER_ADDRESS								\
		USCI_A3_PORT_BASE_ADDRESS +											\
		USCI_A3_PORT_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_A3_PORT_SELECT_REGISTER_2_ADDRESS								\
		USCI_A3_PORT_BASE_ADDRESS +											\
		USCI_A3_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET
#define USCI_A3_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS						\
		USCI_A3_PORT_BASE_ADDRESS +											\
		USCI_A3_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_A3 port control register access macros
#define USCI_A3_OUT_REGISTER												\
		*((uint8_t*)USCI_A3_PORT_OUTPUT_REGISTER_ADDRESS)
#define USCI_A3_DIR_REGISTER												\
		*((uint8_t*)USCI_A3_PORT_DIRECTION_REGISTER_ADDRESS)
#define USCI_A3_SEL_REGISTER												\
		*((uint8_t*)USCI_A3_PORT_SELECT_REGISTER_ADDRESS)
#define USCI_A3_SEL_REGISTER_2												\
		*((uint8_t*)USCI_A3_PORT_SELECT_REGISTER_2_ADDRESS)

#else
// USCI_B0 peripheral control register name aliases (see device-specific include)
#define USCI_A3_CONTROL_REGISTER_0									UCA3CTL0
#define USCI_A3_CONTROL_REGISTER_1									UCA3CTL1
#define USCI_A3_BAUD_RATE_CONTROL_REGISTER_0						UCA3BR0
#define USCI_A3_BAUD_RATE_CONTROL_REGISTER_1						UCA3BR1
#define USCI_A3_MODULATION_CONTROL_REGISTER							UCA3MCTL
#define USCI_A3_STATUS_REGISTER										UCA3STAT
#define USCI_A3_RX_BUF												UCA3RXBUF
#define USCI_A3_TX_BUF												UCA3TXBUF
#define USCI_A3_AUTO_BAUD_CONTROL_REGISTER							UCA3ABCTL
#define USCI_A3_IRDA_TX_CONTROL_REGISTER							UCA3IRTCTL
#define USCI_A3_IRDA_RX_CONTROL_REGISTER							UCA3IRRCTL

// USCI_B0 interrupt control register name aliases
#define USCI_A3_INTERRUPT_ENABLE_REGISTER							UC1IE
#define USCI_A3_INTERRUPT_FLAG_REGISTER								UC1IFG

// USCI_B0 bit name aliases
#define USCI_A3_RX_IE_BIT											UCA3RXIE
#define USCI_A3_TX_IE_BIT											UCA3TXIE
#define USCI_A3_BUSY_FLAG											UCA3SY
#define USCI_A3_TX_INTERRUPT_FLAG									UCA3TXIFG
#define USCI_A3_RX_INTERRUPT_FLAG									UCA3RXIFG

// USCI_B0 port register access name aliases
#define USCI_A3_OUT_REGISTER										P1OUT
#define USCI_A3_DIR_REGISTER										P1DIR
#define USCI_A3_SEL_REGISTER										P1SEL
#define USCI_A3_SEL_REGISTER_2										P1SEL2
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

#endif /* __MSP430_HAS_USCI_A3__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A3															 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B0																	 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B0__) || defined (__MSP430_HAS_USCI_AB0__)
// USCI_B0 interrupt control register addresses
#define USCI_B0_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_B0_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET					0x02

// USCI_B0 interrupt control register address resolution macros
#define USCI_B0_INTERRUPT_ENABLE_REGISTER_ADDRESS							\
	USCI_B0_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_B0_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_B0_INTERRUPT_FLAG_REGISTER_ADDRESS								\
	USCI_B0_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_B0_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET

// USCI_B0 interrupt control register access macros
#define USCI_B0_INTERRUPT_ENABLE_REGISTER									\
	*((uint8_t*)USCI_B0_INTERRUPT_ENABLE_REGISTER_ADDRESS)
#define USCI_B0_INTERRUPT_FLAG_REGISTER										\
	*((uint8_t*)USCI_B0_INTERRUPT_FLAG_REGISTER_ADDRESS)


// USCI_B0 peripheral control register address offsets
#define USCI_B0_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_B0_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET					0x01
#define USCI_B0_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_B0_CONTROL_REGISTER_0_ADDRESS_OFFSET						0x03
#define USCI_B0_CONTROL_REGISTER_1_ADDRESS_OFFSET						0x04
#define USCI_B0_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET				0x05
#define USCI_B0_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET				0x06
#define USCI_B0_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET				0x07
#define USCI_B0_STATUS_REGISTER_ADDRESS_OFFSET							0x08
#define USCI_B0_RX_BUF_ADDRESS_OFFSET									0x09
#define USCI_B0_TX_BUF_ADDRESS_OFFSET									0x0A

// USCI_B0 peripheral control register address resolution macros
#define USCI_B0_AUTO_BAUD_CONTROL_REGISTER_ADDRESS							\
		USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS +							\
		USCI_B0_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B0_IRDA_TX_CONTROL_REGISTER_ADDRESS							\
		USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B0_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B0_IRDA_RX_CONTROL_REGISTER_ADDRESS							\
		USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B0_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B0_CONTROL_REGISTER_0_ADDRESS									\
		USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B0_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_B0_CONTROL_REGISTER_1_ADDRESS									\
		USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B0_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_B0_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS						\
		USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B0_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_B0_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS						\
		USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B0_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_B0_MODULATION_CONTROL_REGISTER_ADDRESS							\
		USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B0_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B0_STATUS_REGISTER_ADDRESS										\
		USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B0_STATUS_REGISTER_ADDRESS_OFFSET
#define USCI_B0_RX_BUF_ADDRESS												\
		USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B0_RX_BUF_ADDRESS_OFFSET
#define USCI_B0_TX_BUF_ADDRESS												\
		USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B0_TX_BUF_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_B0 peripheral control register access macros
#define USCI_B0_AUTO_BAUD_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B0_AUTO_BAUD_CONTROL_REGISTER_ADDRESS)
#define USCI_B0_IRDA_TX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B0_IRDA_TX_CONTROL_REGISTER_ADDRESS)
#define USCI_B0_IRDA_RX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B0_IRDA_RX_CONTROL_REGISTER_ADDRESS)
#define USCI_B0_CONTROL_REGISTER_0											\
	*((uint8_t*)USCI_B0_CONTROL_REGISTER_0_ADDRESS)
#define USCI_B0_CONTROL_REGISTER_1											\
	*((uint8_t*)USCI_B0_CONTROL_REGISTER_1_ADDRESS)
#define USCI_B0_BAUD_RATE_CONTROL_REGISTER_0								\
	*((uint8_t*)USCI_B0_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS)
#define USCI_B0_BAUD_RATE_CONTROL_REGISTER_1								\
	*((uint8_t*)USCI_B0_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS)
#define USCI_B0_MODULATION_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B0_MODULATION_CONTROL_REGISTER_ADDRESS)
#define USCI_B0_STATUS_REGISTER												\
	*((uint8_t*)USCI_B0_STATUS_REGISTER_ADDRESS)
#define USCI_B0_RX_BUF														\
	*((uint8_t*)USCI_B0_RX_BUF_ADDRESS)
#define USCI_B0_TX_BUF														\
	*((uint8_t*)USCI_B0_TX_BUF_ADDRESS)
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

// USCI_B0 port control register address offsets
#define USCI_B0_PORT_INPUT_REGISTER_ADDRESS_OFFSET						0x00
#define USCI_B0_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET						0x01
#define USCI_B0_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_B0_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET				0x03
#define USCI_B0_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET		0x04
#define USCI_B0_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET			0x05
#define USCI_B0_PORT_SELECT_REGISTER_ADDRESS_OFFSET						0x06
#define USCI_B0_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET					0x21
#define USCI_B0_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET			0x07

// USCI_B0 port control register address resolution macros
#define USCI_B0_PORT_INPUT_REGISTER_ADDRESS									\
		USCI_B0_PORT_BASE_ADDRESS +											\
		USCI_B0_PORT_INPUT_REGISTER_ADDRESS_OFFSET
#define USCI_B0_PORT_OUTPUT_REGISTER_ADDRESS								\
		USCI_B0_PORT_BASE_ADDRESS +											\
		USCI_B0_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET
#define USCI_B0_PORT_DIRECTION_REGISTER_ADDRESS								\
		USCI_B0_PORT_BASE_ADDRESS +											\
		USCI_B0_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET
#define USCI_B0_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS						\
		USCI_B0_PORT_BASE_ADDRESS +											\
		USCI_B0_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET
#define USCI_B0_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS					\
		USCI_B0_PORT_BASE_ADDRESS +											\
		USCI_B0_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_B0_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS						\
		USCI_B0_PORT_BASE_ADDRESS +											\
		USCI_B0_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_B0_PORT_SELECT_REGISTER_ADDRESS								\
		USCI_B0_PORT_BASE_ADDRESS +											\
		USCI_B0_PORT_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_B0_PORT_SELECT_REGISTER_2_ADDRESS								\
		USCI_B0_PORT_BASE_ADDRESS +											\
		USCI_B0_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET
#define USCI_B0_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS						\
		USCI_B0_PORT_BASE_ADDRESS +											\
		USCI_B0_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_B0 port control register access macros
#define USCI_B0_OUT_REGISTER												\
		*((uint8_t*)USCI_B0_PORT_OUTPUT_REGISTER_ADDRESS)
#define USCI_B0_DIR_REGISTER												\
		*((uint8_t*)USCI_B0_PORT_DIRECTION_REGISTER_ADDRESS)
#define USCI_B0_SEL_REGISTER												\
		*((uint8_t*)USCI_B0_PORT_SELECT_REGISTER_ADDRESS)
#define USCI_B0_SEL_REGISTER_2												\
		*((uint8_t*)USCI_B0_PORT_SELECT_REGISTER_2_ADDRESS)

#else
// USCI_B0 peripheral control register name aliases (see device-specific include)
#define USCI_B0_CONTROL_REGISTER_0									UCB0CTL0
#define USCI_B0_CONTROL_REGISTER_1									UCB0CTL1
#define USCI_B0_BAUD_RATE_CONTROL_REGISTER_0						UCB0BR0
#define USCI_B0_BAUD_RATE_CONTROL_REGISTER_1						UCB0BR1
#define USCI_B0_MODULATION_CONTROL_REGISTER							UCB0MCTL
#define USCI_B0_STATUS_REGISTER										UCB0STAT
#define USCI_B0_RX_BUF												UCB0RXBUF
#define USCI_B0_TX_BUF												UCB0TXBUF
#define USCI_B0_AUTO_BAUD_CONTROL_REGISTER							UCB0ABCTL
#define USCI_B0_IRDA_TX_CONTROL_REGISTER							UCB0IRTCTL
#define USCI_B0_IRDA_RX_CONTROL_REGISTER							UCB0IRRCTL

// USCI_B0 interrupt control register name aliases
#define USCI_B0_INTERRUPT_ENABLE_REGISTER							UC0IE
#define USCI_B0_INTERRUPT_FLAG_REGISTER								UC0IFG

// USCI_B0 bit name aliases
#define USCI_B0_RX_IE_BIT											UCB0RXIE
#define USCI_B0_TX_IE_BIT											UCB0TXIE
#define USCI_B0_BUSY_FLAG											UCBUSY
#define USCI_B0_TX_INTERRUPT_FLAG									UCB0TXIFG
#define USCI_B0_RX_INTERRUPT_FLAG									UCB0RXIFG

// USCI_B0 port register access name aliases
#define USCI_B0_OUT_REGISTER										P1OUT
#define USCI_B0_DIR_REGISTER										P1DIR
#define USCI_B0_SEL_REGISTER										P1SEL
#define USCI_B0_SEL_REGISTER_2										P1SEL2
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

#endif /* __MSP430_HAS_USCI_B0__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B0															 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B1																	 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B1__) || defined (__MSP430_HAS_USCI_AB1__)
// USCI_B1 interrupt control register addresses
#define USCI_B1_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_B1_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET					0x02

// USCI_B1 interrupt control register address resolution macros
#define USCI_B1_INTERRUPT_ENABLE_REGISTER_ADDRESS							\
	USCI_B1_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_B1_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_B1_INTERRUPT_FLAG_REGISTER_ADDRESS								\
	USCI_B1_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_B1_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET

// USCI_B1 interrupt control register access macros
#define USCI_B1_INTERRUPT_ENABLE_REGISTER									\
	*((uint8_t*)USCI_B1_INTERRUPT_ENABLE_REGISTER_ADDRESS)
#define USCI_B1_INTERRUPT_FLAG_REGISTER										\
	*((uint8_t*)USCI_B1_INTERRUPT_FLAG_REGISTER_ADDRESS)


// USCI_B1 peripheral control register address offsets
#define USCI_B1_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_B1_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET					0x01
#define USCI_B1_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_B1_CONTROL_REGISTER_0_ADDRESS_OFFSET						0x03
#define USCI_B1_CONTROL_REGISTER_1_ADDRESS_OFFSET						0x04
#define USCI_B1_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET				0x05
#define USCI_B1_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET				0x06
#define USCI_B1_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET				0x07
#define USCI_B1_STATUS_REGISTER_ADDRESS_OFFSET							0x08
#define USCI_B1_RX_BUF_ADDRESS_OFFSET									0x09
#define USCI_B1_TX_BUF_ADDRESS_OFFSET									0x0A

// USCI_B1 peripheral control register address resolution macros
#define USCI_B1_AUTO_BAUD_CONTROL_REGISTER_ADDRESS							\
		USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS +							\
		USCI_B1_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B1_IRDA_TX_CONTROL_REGISTER_ADDRESS							\
		USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B1_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B1_IRDA_RX_CONTROL_REGISTER_ADDRESS							\
		USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B1_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B1_CONTROL_REGISTER_0_ADDRESS									\
		USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B1_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_B1_CONTROL_REGISTER_1_ADDRESS									\
		USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B1_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_B1_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS						\
		USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B1_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_B1_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS						\
		USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B1_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_B1_MODULATION_CONTROL_REGISTER_ADDRESS							\
		USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B1_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B1_STATUS_REGISTER_ADDRESS										\
		USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B1_STATUS_REGISTER_ADDRESS_OFFSET
#define USCI_B1_RX_BUF_ADDRESS												\
		USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B1_RX_BUF_ADDRESS_OFFSET
#define USCI_B1_TX_BUF_ADDRESS												\
		USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B1_TX_BUF_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_B1 peripheral control register access macros
#define USCI_B1_AUTO_BAUD_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B1_AUTO_BAUD_CONTROL_REGISTER_ADDRESS)
#define USCI_B1_IRDA_TX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B1_IRDA_TX_CONTROL_REGISTER_ADDRESS)
#define USCI_B1_IRDA_RX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B1_IRDA_RX_CONTROL_REGISTER_ADDRESS)
#define USCI_B1_CONTROL_REGISTER_0											\
	*((uint8_t*)USCI_B1_CONTROL_REGISTER_0_ADDRESS)
#define USCI_B1_CONTROL_REGISTER_1											\
	*((uint8_t*)USCI_B1_CONTROL_REGISTER_1_ADDRESS)
#define USCI_B1_BAUD_RATE_CONTROL_REGISTER_0								\
	*((uint8_t*)USCI_B1_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS)
#define USCI_B1_BAUD_RATE_CONTROL_REGISTER_1								\
	*((uint8_t*)USCI_B1_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS)
#define USCI_B1_MODULATION_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B1_MODULATION_CONTROL_REGISTER_ADDRESS)
#define USCI_B1_STATUS_REGISTER												\
	*((uint8_t*)USCI_B1_STATUS_REGISTER_ADDRESS)
#define USCI_B1_RX_BUF														\
	*((uint8_t*)USCI_B1_RX_BUF_ADDRESS)
#define USCI_B1_TX_BUF														\
	*((uint8_t*)USCI_B1_TX_BUF_ADDRESS)
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

// USCI_B1 port control register address offsets
#define USCI_B1_PORT_INPUT_REGISTER_ADDRESS_OFFSET						0x00
#define USCI_B1_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET						0x01
#define USCI_B1_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_B1_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET				0x03
#define USCI_B1_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET		0x04
#define USCI_B1_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET			0x05
#define USCI_B1_PORT_SELECT_REGISTER_ADDRESS_OFFSET						0x06
#define USCI_B1_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET					0x21
#define USCI_B1_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET			0x07

// USCI_B1 port control register address resolution macros
#define USCI_B1_PORT_INPUT_REGISTER_ADDRESS									\
		USCI_B1_PORT_BASE_ADDRESS +											\
		USCI_B1_PORT_INPUT_REGISTER_ADDRESS_OFFSET
#define USCI_B1_PORT_OUTPUT_REGISTER_ADDRESS								\
		USCI_B1_PORT_BASE_ADDRESS +											\
		USCI_B1_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET
#define USCI_B1_PORT_DIRECTION_REGISTER_ADDRESS								\
		USCI_B1_PORT_BASE_ADDRESS +											\
		USCI_B1_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET
#define USCI_B1_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS						\
		USCI_B1_PORT_BASE_ADDRESS +											\
		USCI_B1_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET
#define USCI_B1_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS					\
		USCI_B1_PORT_BASE_ADDRESS +											\
		USCI_B1_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_B1_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS						\
		USCI_B1_PORT_BASE_ADDRESS +											\
		USCI_B1_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_B1_PORT_SELECT_REGISTER_ADDRESS								\
		USCI_B1_PORT_BASE_ADDRESS +											\
		USCI_B1_PORT_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_B1_PORT_SELECT_REGISTER_2_ADDRESS								\
		USCI_B1_PORT_BASE_ADDRESS +											\
		USCI_B1_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET
#define USCI_B1_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS						\
		USCI_B1_PORT_BASE_ADDRESS +											\
		USCI_B1_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_B1 port control register access macros
#define USCI_B1_OUT_REGISTER												\
		*((uint8_t*)USCI_B1_PORT_OUTPUT_REGISTER_ADDRESS)
#define USCI_B1_DIR_REGISTER												\
		*((uint8_t*)USCI_B1_PORT_DIRECTION_REGISTER_ADDRESS)
#define USCI_B1_SEL_REGISTER												\
		*((uint8_t*)USCI_B1_PORT_SELECT_REGISTER_ADDRESS)
#define USCI_B1_SEL_REGISTER_2												\
		*((uint8_t*)USCI_B1_PORT_SELECT_REGISTER_2_ADDRESS)

#else
// USCI_B0 peripheral control register name aliases (see device-specific include)
#define USCI_B1_CONTROL_REGISTER_0									UCB1CTL0
#define USCI_B1_CONTROL_REGISTER_1									UCB1CTL1
#define USCI_B1_BAUD_RATE_CONTROL_REGISTER_0						UCB1BR0
#define USCI_B1_BAUD_RATE_CONTROL_REGISTER_1						UCB1BR1
#define USCI_B1_MODULATION_CONTROL_REGISTER							UCB1MCTL
#define USCI_B1_STATUS_REGISTER										UCB1STAT
#define USCI_B1_RX_BUF												UCB1RXBUF
#define USCI_B1_TX_BUF												UCB1TXBUF
#define USCI_B1_AUTO_BAUD_CONTROL_REGISTER							UCB1ABCTL
#define USCI_B1_IRDA_TX_CONTROL_REGISTER							UCB1IRTCTL
#define USCI_B1_IRDA_RX_CONTROL_REGISTER							UCB1IRRCTL

// USCI_B0 interrupt control register name aliases
#define USCI_B1_INTERRUPT_ENABLE_REGISTER							UC1IE
#define USCI_B1_INTERRUPT_FLAG_REGISTER								UC1IFG

// USCI_B0 bit name aliases
#define USCI_B1_RX_IE_BIT											UCB1RXIE
#define USCI_B1_TX_IE_BIT											UCB1TXIE
#define USCI_B1_BUSY_FLAG											UCB1SY
#define USCI_B1_TX_INTERRUPT_FLAG									UCB1TXIFG
#define USCI_B1_RX_INTERRUPT_FLAG									UCB1RXIFG

// USCI_B0 port register access name aliases
#define USCI_B1_OUT_REGISTER										P1OUT
#define USCI_B1_DIR_REGISTER										P1DIR
#define USCI_B1_SEL_REGISTER										P1SEL
#define USCI_B1_SEL_REGISTER_2										P1SEL2
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

#endif /* __MSP430_HAS_USCI_B1__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B1															 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B2																	 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B2__) || defined (__MSP430_HAS_USCI_AB2__)
// USCI_B2 interrupt control register addresses
#define USCI_B2_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_B2_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET					0x02

// USCI_B2 interrupt control register address resolution macros
#define USCI_B2_INTERRUPT_ENABLE_REGISTER_ADDRESS							\
	USCI_B2_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_B2_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_B2_INTERRUPT_FLAG_REGISTER_ADDRESS								\
	USCI_B2_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_B2_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET

// USCI_B2 interrupt control register access macros
#define USCI_B2_INTERRUPT_ENABLE_REGISTER									\
	*((uint8_t*)USCI_B2_INTERRUPT_ENABLE_REGISTER_ADDRESS)
#define USCI_B2_INTERRUPT_FLAG_REGISTER										\
	*((uint8_t*)USCI_B2_INTERRUPT_FLAG_REGISTER_ADDRESS)


// USCI_B2 peripheral control register address offsets
#define USCI_B2_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_B2_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET					0x01
#define USCI_B2_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_B2_CONTROL_REGISTER_0_ADDRESS_OFFSET						0x03
#define USCI_B2_CONTROL_REGISTER_1_ADDRESS_OFFSET						0x04
#define USCI_B2_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET				0x05
#define USCI_B2_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET				0x06
#define USCI_B2_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET				0x07
#define USCI_B2_STATUS_REGISTER_ADDRESS_OFFSET							0x08
#define USCI_B2_RX_BUF_ADDRESS_OFFSET									0x09
#define USCI_B2_TX_BUF_ADDRESS_OFFSET									0x0A

// USCI_B2 peripheral control register address resolution macros
#define USCI_B2_AUTO_BAUD_CONTROL_REGISTER_ADDRESS							\
		USCI_B2_PERIPHERAL_CONTROL_BASE_ADDRESS +							\
		USCI_B2_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B2_IRDA_TX_CONTROL_REGISTER_ADDRESS							\
		USCI_B2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B2_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B2_IRDA_RX_CONTROL_REGISTER_ADDRESS							\
		USCI_B2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B2_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B2_CONTROL_REGISTER_0_ADDRESS									\
		USCI_B2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B2_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_B2_CONTROL_REGISTER_1_ADDRESS									\
		USCI_B2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B2_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_B2_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS						\
		USCI_B2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B2_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_B2_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS						\
		USCI_B2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B2_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_B2_MODULATION_CONTROL_REGISTER_ADDRESS							\
		USCI_B2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B2_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B2_STATUS_REGISTER_ADDRESS										\
		USCI_B2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B2_STATUS_REGISTER_ADDRESS_OFFSET
#define USCI_B2_RX_BUF_ADDRESS												\
		USCI_B2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B2_RX_BUF_ADDRESS_OFFSET
#define USCI_B2_TX_BUF_ADDRESS												\
		USCI_B2_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B2_TX_BUF_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_B2 peripheral control register access macros
#define USCI_B2_AUTO_BAUD_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B2_AUTO_BAUD_CONTROL_REGISTER_ADDRESS)
#define USCI_B2_IRDA_TX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B2_IRDA_TX_CONTROL_REGISTER_ADDRESS)
#define USCI_B2_IRDA_RX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B2_IRDA_RX_CONTROL_REGISTER_ADDRESS)
#define USCI_B2_CONTROL_REGISTER_0											\
	*((uint8_t*)USCI_B2_CONTROL_REGISTER_0_ADDRESS)
#define USCI_B2_CONTROL_REGISTER_1											\
	*((uint8_t*)USCI_B2_CONTROL_REGISTER_1_ADDRESS)
#define USCI_B2_BAUD_RATE_CONTROL_REGISTER_0								\
	*((uint8_t*)USCI_B2_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS)
#define USCI_B2_BAUD_RATE_CONTROL_REGISTER_1								\
	*((uint8_t*)USCI_B2_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS)
#define USCI_B2_MODULATION_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B2_MODULATION_CONTROL_REGISTER_ADDRESS)
#define USCI_B2_STATUS_REGISTER												\
	*((uint8_t*)USCI_B2_STATUS_REGISTER_ADDRESS)
#define USCI_B2_RX_BUF														\
	*((uint8_t*)USCI_B2_RX_BUF_ADDRESS)
#define USCI_B2_TX_BUF														\
	*((uint8_t*)USCI_B2_TX_BUF_ADDRESS)
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

// USCI_B2 port control register address offsets
#define USCI_B2_PORT_INPUT_REGISTER_ADDRESS_OFFSET						0x00
#define USCI_B2_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET						0x01
#define USCI_B2_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_B2_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET				0x03
#define USCI_B2_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET		0x04
#define USCI_B2_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET			0x05
#define USCI_B2_PORT_SELECT_REGISTER_ADDRESS_OFFSET						0x06
#define USCI_B2_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET					0x21
#define USCI_B2_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET			0x07

// USCI_B2 port control register address resolution macros
#define USCI_B2_PORT_INPUT_REGISTER_ADDRESS									\
		USCI_B2_PORT_BASE_ADDRESS +											\
		USCI_B2_PORT_INPUT_REGISTER_ADDRESS_OFFSET
#define USCI_B2_PORT_OUTPUT_REGISTER_ADDRESS								\
		USCI_B2_PORT_BASE_ADDRESS +											\
		USCI_B2_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET
#define USCI_B2_PORT_DIRECTION_REGISTER_ADDRESS								\
		USCI_B2_PORT_BASE_ADDRESS +											\
		USCI_B2_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET
#define USCI_B2_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS						\
		USCI_B2_PORT_BASE_ADDRESS +											\
		USCI_B2_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET
#define USCI_B2_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS					\
		USCI_B2_PORT_BASE_ADDRESS +											\
		USCI_B2_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_B2_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS						\
		USCI_B2_PORT_BASE_ADDRESS +											\
		USCI_B2_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_B2_PORT_SELECT_REGISTER_ADDRESS								\
		USCI_B2_PORT_BASE_ADDRESS +											\
		USCI_B2_PORT_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_B2_PORT_SELECT_REGISTER_2_ADDRESS								\
		USCI_B2_PORT_BASE_ADDRESS +											\
		USCI_B2_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET
#define USCI_B2_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS						\
		USCI_B2_PORT_BASE_ADDRESS +											\
		USCI_B2_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_B2 port control register access macros
#define USCI_B2_OUT_REGISTER												\
		*((uint8_t*)USCI_B2_PORT_OUTPUT_REGISTER_ADDRESS)
#define USCI_B2_DIR_REGISTER												\
		*((uint8_t*)USCI_B2_PORT_DIRECTION_REGISTER_ADDRESS)
#define USCI_B2_SEL_REGISTER												\
		*((uint8_t*)USCI_B2_PORT_SELECT_REGISTER_ADDRESS)
#define USCI_B2_SEL_REGISTER_2												\
		*((uint8_t*)USCI_B2_PORT_SELECT_REGISTER_2_ADDRESS)

#else
// USCI_B0 peripheral control register name aliases (see device-specific include)
#define USCI_B2_CONTROL_REGISTER_0									UCB2CTL0
#define USCI_B2_CONTROL_REGISTER_1									UCB2CTL1
#define USCI_B2_BAUD_RATE_CONTROL_REGISTER_0						UCB2BR0
#define USCI_B2_BAUD_RATE_CONTROL_REGISTER_1						UCB2BR1
#define USCI_B2_MODULATION_CONTROL_REGISTER							UCB2MCTL
#define USCI_B2_STATUS_REGISTER										UCB2STAT
#define USCI_B2_RX_BUF												UCB2RXBUF
#define USCI_B2_TX_BUF												UCB2TXBUF
#define USCI_B2_AUTO_BAUD_CONTROL_REGISTER							UCB2ABCTL
#define USCI_B2_IRDA_TX_CONTROL_REGISTER							UCB2IRTCTL
#define USCI_B2_IRDA_RX_CONTROL_REGISTER							UCB2IRRCTL

// USCI_B0 interrupt control register name aliases
#define USCI_B2_INTERRUPT_ENABLE_REGISTER							UC1IE
#define USCI_B2_INTERRUPT_FLAG_REGISTER								UC1IFG

// USCI_B0 bit name aliases
#define USCI_B2_RX_IE_BIT											UCB2RXIE
#define USCI_B2_TX_IE_BIT											UCB2TXIE
#define USCI_B2_BUSY_FLAG											UCB2SY
#define USCI_B2_TX_INTERRUPT_FLAG									UCB2TXIFG
#define USCI_B2_RX_INTERRUPT_FLAG									UCB2RXIFG

// USCI_B0 port register access name aliases
#define USCI_B2_OUT_REGISTER										P1OUT
#define USCI_B2_DIR_REGISTER										P1DIR
#define USCI_B2_SEL_REGISTER										P1SEL
#define USCI_B2_SEL_REGISTER_2										P1SEL2
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

#endif /* __MSP430_HAS_USCI_B2__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B2															 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B3																	 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B3__) || defined (__MSP430_HAS_USCI_AB3__)
// USCI_B3 interrupt control register addresses
#define USCI_B3_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_B3_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET					0x02

// USCI_B3 interrupt control register address resolution macros
#define USCI_B3_INTERRUPT_ENABLE_REGISTER_ADDRESS							\
	USCI_B3_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_B3_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_B3_INTERRUPT_FLAG_REGISTER_ADDRESS								\
	USCI_B3_INTERRUPT_CONTROL_BASE_ADDRESS + 								\
	USCI_B3_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET

// USCI_B3 interrupt control register access macros
#define USCI_B3_INTERRUPT_ENABLE_REGISTER									\
	*((uint8_t*)USCI_B3_INTERRUPT_ENABLE_REGISTER_ADDRESS)
#define USCI_B3_INTERRUPT_FLAG_REGISTER										\
	*((uint8_t*)USCI_B3_INTERRUPT_FLAG_REGISTER_ADDRESS)


// USCI_B3 peripheral control register address offsets
#define USCI_B3_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET				0x00
#define USCI_B3_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET					0x01
#define USCI_B3_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_B3_CONTROL_REGISTER_0_ADDRESS_OFFSET						0x03
#define USCI_B3_CONTROL_REGISTER_1_ADDRESS_OFFSET						0x04
#define USCI_B3_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET				0x05
#define USCI_B3_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET				0x06
#define USCI_B3_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET				0x07
#define USCI_B3_STATUS_REGISTER_ADDRESS_OFFSET							0x08
#define USCI_B3_RX_BUF_ADDRESS_OFFSET									0x09
#define USCI_B3_TX_BUF_ADDRESS_OFFSET									0x0A

// USCI_B3 peripheral control register address resolution macros
#define USCI_B3_AUTO_BAUD_CONTROL_REGISTER_ADDRESS							\
		USCI_B3_PERIPHERAL_CONTROL_BASE_ADDRESS +							\
		USCI_B3_AUTO_BAUD_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B3_IRDA_TX_CONTROL_REGISTER_ADDRESS							\
		USCI_B3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B3_IRDA_TX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B3_IRDA_RX_CONTROL_REGISTER_ADDRESS							\
		USCI_B3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B3_IRDA_RX_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B3_CONTROL_REGISTER_0_ADDRESS									\
		USCI_B3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B3_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_B3_CONTROL_REGISTER_1_ADDRESS									\
		USCI_B3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B3_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_B3_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS						\
		USCI_B3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B3_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS_OFFSET
#define USCI_B3_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS						\
		USCI_B3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B3_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS_OFFSET
#define USCI_B3_MODULATION_CONTROL_REGISTER_ADDRESS							\
		USCI_B3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B3_MODULATION_CONTROL_REGISTER_ADDRESS_OFFSET
#define USCI_B3_STATUS_REGISTER_ADDRESS										\
		USCI_B3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B3_STATUS_REGISTER_ADDRESS_OFFSET
#define USCI_B3_RX_BUF_ADDRESS												\
		USCI_B3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B3_RX_BUF_ADDRESS_OFFSET
#define USCI_B3_TX_BUF_ADDRESS												\
		USCI_B3_PERIPHERAL_CONTROL_BASE_ADDRESS + 							\
		USCI_B3_TX_BUF_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_B3 peripheral control register access macros
#define USCI_B3_AUTO_BAUD_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B3_AUTO_BAUD_CONTROL_REGISTER_ADDRESS)
#define USCI_B3_IRDA_TX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B3_IRDA_TX_CONTROL_REGISTER_ADDRESS)
#define USCI_B3_IRDA_RX_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B3_IRDA_RX_CONTROL_REGISTER_ADDRESS)
#define USCI_B3_CONTROL_REGISTER_0											\
	*((uint8_t*)USCI_B3_CONTROL_REGISTER_0_ADDRESS)
#define USCI_B3_CONTROL_REGISTER_1											\
	*((uint8_t*)USCI_B3_CONTROL_REGISTER_1_ADDRESS)
#define USCI_B3_BAUD_RATE_CONTROL_REGISTER_0								\
	*((uint8_t*)USCI_B3_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS)
#define USCI_B3_BAUD_RATE_CONTROL_REGISTER_1								\
	*((uint8_t*)USCI_B3_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS)
#define USCI_B3_MODULATION_CONTROL_REGISTER									\
	*((uint8_t*)USCI_B3_MODULATION_CONTROL_REGISTER_ADDRESS)
#define USCI_B3_STATUS_REGISTER												\
	*((uint8_t*)USCI_B3_STATUS_REGISTER_ADDRESS)
#define USCI_B3_RX_BUF														\
	*((uint8_t*)USCI_B3_RX_BUF_ADDRESS)
#define USCI_B3_TX_BUF														\
	*((uint8_t*)USCI_B3_TX_BUF_ADDRESS)
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

// USCI_B3 port control register address offsets
#define USCI_B3_PORT_INPUT_REGISTER_ADDRESS_OFFSET						0x00
#define USCI_B3_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET						0x01
#define USCI_B3_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET					0x02
#define USCI_B3_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET				0x03
#define USCI_B3_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET		0x04
#define USCI_B3_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET			0x05
#define USCI_B3_PORT_SELECT_REGISTER_ADDRESS_OFFSET						0x06
#define USCI_B3_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET					0x21
#define USCI_B3_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET			0x07

// USCI_B3 port control register address resolution macros
#define USCI_B3_PORT_INPUT_REGISTER_ADDRESS									\
		USCI_B3_PORT_BASE_ADDRESS +											\
		USCI_B3_PORT_INPUT_REGISTER_ADDRESS_OFFSET
#define USCI_B3_PORT_OUTPUT_REGISTER_ADDRESS								\
		USCI_B3_PORT_BASE_ADDRESS +											\
		USCI_B3_PORT_OUTPUT_REGISTER_ADDRESS_OFFSET
#define USCI_B3_PORT_DIRECTION_REGISTER_ADDRESS								\
		USCI_B3_PORT_BASE_ADDRESS +											\
		USCI_B3_PORT_DIRECTION_REGISTER_ADDRESS_OFFSET
#define USCI_B3_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS						\
		USCI_B3_PORT_BASE_ADDRESS +											\
		USCI_B3_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS_OFFSET
#define USCI_B3_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS					\
		USCI_B3_PORT_BASE_ADDRESS +											\
		USCI_B3_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_B3_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS						\
		USCI_B3_PORT_BASE_ADDRESS +											\
		USCI_B3_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS_OFFSET
#define USCI_B3_PORT_SELECT_REGISTER_ADDRESS								\
		USCI_B3_PORT_BASE_ADDRESS +											\
		USCI_B3_PORT_SELECT_REGISTER_ADDRESS_OFFSET
#define USCI_B3_PORT_SELECT_REGISTER_2_ADDRESS								\
		USCI_B3_PORT_BASE_ADDRESS +											\
		USCI_B3_PORT_SELECT_REGISTER_2_ADDRESS_OFFSET
#define USCI_B3_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS						\
		USCI_B3_PORT_BASE_ADDRESS +											\
		USCI_B3_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS_OFFSET

#if !defined(__USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__)
// USCI_B3 port control register access macros
#define USCI_B3_OUT_REGISTER												\
		*((uint8_t*)USCI_B3_PORT_OUTPUT_REGISTER_ADDRESS)
#define USCI_B3_DIR_REGISTER												\
		*((uint8_t*)USCI_B3_PORT_DIRECTION_REGISTER_ADDRESS)
#define USCI_B3_SEL_REGISTER												\
		*((uint8_t*)USCI_B3_PORT_SELECT_REGISTER_ADDRESS)
#define USCI_B3_SEL_REGISTER_2												\
		*((uint8_t*)USCI_B3_PORT_SELECT_REGISTER_2_ADDRESS)

#else
// USCI_B0 peripheral control register name aliases (see device-specific include)
#define USCI_B3_CONTROL_REGISTER_0									UCB3CTL0
#define USCI_B3_CONTROL_REGISTER_1									UCB3CTL1
#define USCI_B3_BAUD_RATE_CONTROL_REGISTER_0						UCB3BR0
#define USCI_B3_BAUD_RATE_CONTROL_REGISTER_1						UCB3BR1
#define USCI_B3_MODULATION_CONTROL_REGISTER							UCB3MCTL
#define USCI_B3_STATUS_REGISTER										UCB3STAT
#define USCI_B3_RX_BUF												UCB3RXBUF
#define USCI_B3_TX_BUF												UCB3TXBUF
#define USCI_B3_AUTO_BAUD_CONTROL_REGISTER							UCB3ABCTL
#define USCI_B3_IRDA_TX_CONTROL_REGISTER							UCB3IRTCTL
#define USCI_B3_IRDA_RX_CONTROL_REGISTER							UCB3IRRCTL

// USCI_B0 interrupt control register name aliases
#define USCI_B3_INTERRUPT_ENABLE_REGISTER							UC1IE
#define USCI_B3_INTERRUPT_FLAG_REGISTER								UC1IFG

// USCI_B0 bit name aliases
#define USCI_B3_RX_IE_BIT											UCB3RXIE
#define USCI_B3_TX_IE_BIT											UCB3TXIE
#define USCI_B3_BUSY_FLAG											UCB3SY
#define USCI_B3_TX_INTERRUPT_FLAG									UCB3TXIFG
#define USCI_B3_RX_INTERRUPT_FLAG									UCB3RXIFG

// USCI_B0 port register access name aliases
#define USCI_B3_OUT_REGISTER										P1OUT
#define USCI_B3_DIR_REGISTER										P1DIR
#define USCI_B3_SEL_REGISTER										P1SEL
#define USCI_B3_SEL_REGISTER_2										P1SEL2
#endif /* __USE_TI_DEVICE_INCLUDE_REGISTER_NAMES__ */

#endif /* __MSP430_HAS_USCI_B3__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B3															 */
/*                                                                           */
/*****************************************************************************/
/*****************************************************************************/
//	End Defines


/*****************************************************************************/
//	Constant Struct Overlay Declarations
/*****************************************************************************/
/*****************************************************************************/
/*                                                                           */
/*	USCI Struct Overlay Declaration 										 */
/*                                                                           */
/*****************************************************************************/
#if (defined (__MSP430_HAS_USCI__) && !(defined (__MSP430_HAS_USCI_AB0__) || \
										defined (__MSP430_HAS_USCI_AB1__) || \
										defined (__MSP430_HAS_USCI_A0__) || \
										defined (__MSP430_HAS_USCI_A1__) || \
										defined (__MSP430_HAS_USCI_B0__) || \
										defined (__MSP430_HAS_USCI_B1__)))
// Peripheral Control
// Declare pointer to struct overlay for the USCI peripheral in UART mode
USCI_control_t volatile * const p_USCI_CONTROL =
		(USCI_control_t *) USCI_PERIPHERAL_CONTROL_BASE_ADDRESS;
//#define USCI_CONTROL		(*p_USCI_CONTROL)

// GPIO Control
#if defined (__MSP430G2553__)
Port1_t volatile * const p_USCI_PORT =
		(Port1_t *) USCI_PORT_BASE_ADDRESS;
//#define USCI_PORT		(*p_USCI_PORT)
#endif

// Interrupt Control
USCI_interrupt_t volatile * const p_USCI_INTERRUPT =
		(USCI_interrupt_t *) USCI_INTERRUPT_CONTROL_BASE_ADDRESS;
//#define USCI_INTERRUPT	(*p_USCI_INTERRUPT)
#endif
/*****************************************************************************/
/*                                                                           */
/*	END: USCI Struct Overlay Declaration									 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A0 Struct Overlay Declaration	 									 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A0__) || defined (__MSP430_HAS_USCI_AB0__)

// Peripheral Control
USCI_control_t volatile * const p_USCI_A0_CONTROL =
		(USCI_control_t *) USCI_A0_PERIPHERAL_CONTROL_BASE_ADDRESS;
//#define USCI_A0_CONTROL		(*p_USCI_A0_CONTROL)

// GPIO Control
//#if defined (__MSP430F2618__)
//#define USCI_A0_PORT		GPIO_PORT3
//#elif defined (__MSP430F5438A__) || defined (__MSP430F5438__)
//#define USCI_A0_PORT		GPIO_PORT3
//#endif

#if defined (__MSP430_HAS_USCI__)
// Interrupt Control
USCI_interrupt_t volatile * const p_USCI_A0_INTERRUPT =
		(USCI_interrupt_t *) USCI_A0_INTERRUPT_CONTROL_BASE_ADDRESS;
//#define USCI_A0_INTERRUPT	(*p_USCI_A0_INTERRUPT)
#endif // defined (__MSP430_HAS_USCI__)
#endif
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A0 Struct Overlay Declaration 								 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A1 Struct Overlay Declaration	 									 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A1__) || defined (__MSP430_HAS_USCI_AB1__)

// Peripheral Control
USCI_control_t volatile * const p_USCI_A1_CONTROL =
		(USCI_control_t *) USCI_A1_PERIPHERAL_CONTROL_BASE_ADDRESS;
//#define USCI_A1_CONTROL		(*p_USCI_A1_CONTROL)

// GPIO Control
#if defined (__MSP430F2618__)
Port5_t volatile * const p_USCI_A1_PORT =
		(Port5_t *) USCI_A1_PORT_CONTROL_BASE_ADDRESS;
//#define USCI_A1_PORT		(*p_USCI_A1_PORT)
#elif defined (__MSP430F5438A__) || defined (__MSP430F5438__)
//#define __USCI_A1_HAS_SPLIT_PORT__
struct {
	port3_t volatile * const clk;
	port5_t volatile * const simo_somi_ste_rx_tx;
} const USCI_A1_PORT = {
	(port3_t*) (&P3IN),
	(port5_t*) (&P5IN)
};

//#define USCI_A1_PORT_SIMO_SOMI_STE_RX_TX	GPIO_PORT5
//#define USCI_A1_PORT_CLK					GPIO_PORT3
#endif

#if defined (__MSP430_HAS_USCI__)
// Interrupt Control
USCI_interrupt_t volatile * const p_USCI_A1_INTERRUPT =
		(USCI_interrupt_t *) USCI_A1_INTERRUPT_CONTROL_BASE_ADDRESS;
//#define USCI_A1_INTERRUPT	(*p_USCI_A1_INTERRUPT)
#endif // defined (__MSP430_HAS_USCI__)
#endif
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A1 Struct Overlay Declaration	 								 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A2 Struct Overlay Declaration	 									 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A2__) || defined (__MSP430_HAS_USCI_AB2__)

// Peripheral Control
USCI_control_t volatile * const p_USCI_A2_CONTROL =
		(USCI_control_t *) USCI_A2_PERIPHERAL_CONTROL_BASE_ADDRESS;
//#define USCI_A2_CONTROL		(*p_USCI_A2_CONTROL)

// GPIO Control
//#if defined (__MSP430F5438A__) || defined (__MSP430F5438__)
//#define USCI_A2_PORT		GPIO_PORT9
//#endif

#if defined (__MSP430_HAS_USCI__)
// Interrupt Control
USCI_interrupt_t volatile * const p_USCI_A2_INTERRUPT =
		(USCI_interrupt_t *) USCI_A2_INTERRUPT_CONTROL_BASE_ADDRESS;
//#define USCI_A2_INTERRUPT	(*p_USCI_A2_INTERRUPT)
#endif // defined (__MSP430_HAS_USCI__)
#endif
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A2 Struct Overlay Declaration	 								 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A3 Struct Overlay Declaration	 									 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A3__) || defined (__MSP430_HAS_USCI_AB3__)

// Peripheral Control
USCI_control_t volatile * const p_USCI_A3_CONTROL =
		(USCI_control_t *) USCI_A3_PERIPHERAL_CONTROL_BASE_ADDRESS;
//#define USCI_A3_CONTROL		(*p_USCI_A3_CONTROL)

// GPIO Control
//#if defined (__MSP430F5438A__) || defined (__MSP430F5438__)
//#define USCI_A3_PORT		GPIO_PORT10
//#endif

#if defined (__MSP430_HAS_USCI__)
// Interrupt Control
USCI_interrupt_t volatile * const p_USCI_A3_INTERRUPT =
		(USCI_interrupt_t *) USCI_A3_INTERRUPT_CONTROL_BASE_ADDRESS;
//#define USCI_A3_INTERRUPT	(*p_USCI_A3_INTERRUPT)
#endif // defined (__MSP430_HAS_USCI__)
#endif
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A3 Struct Overlay Declaration	 								 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B0 Struct Overlay Declaration	 									 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B0__) || defined (__MSP430_HAS_USCI_AB0__)

// Peripheral Control
USCI_control_t volatile * const p_USCI_B0_CONTROL =
		(USCI_control_t *) USCI_B0_PERIPHERAL_CONTROL_BASE_ADDRESS;
//#define USCI_B0_CONTROL		(*p_USCI_B0_CONTROL)

// GPIO Control
//#if defined (__MSP430F5438A__) || defined (__MSP430F5438__)
//#define USCI_B0_PORT		GPIO_PORT3
//#endif

#if defined (__MSP430_HAS_USCI__)
// Interrupt Control
USCI_interrupt_t volatile * const p_USCI_B0_INTERRUPT =
		(USCI_interrupt_t *) USCI_B0_INTERRUPT_CONTROL_BASE_ADDRESS;
//#define USCI_B0_INTERRUPT	(*p_USCI_B0_INTERRUPT)
#endif // defined (__MSP430_HAS_USCI__)
#endif
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B0 Struct Overlay Declaration	 								 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B1 Struct Overlay Declaration	 									 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B1__) || defined (__MSP430_HAS_USCI_AB1__)

// Peripheral Control
USCI_control_t volatile * const p_USCI_B1_CONTROL =
		(USCI_control_t *) USCI_B1_PERIPHERAL_CONTROL_BASE_ADDRESS;
//#define USCI_B1_CONTROL		(*p_USCI_B1_CONTROL)

// GPIO Control
#if defined (__MSP430F5438A__) || defined (__MSP430F5438__)
struct {
	port3_t volatile * const scl_somi_clk;
	port5_t volatile * const ste_simo_sda;
} volatile USCI_B1_PORT = {
	(port3_t*) (&P3IN),
	(port5_t*) (&P5IN)
};

//#define USCI_B1_PORT_SIMO_STE_SDA		GPIO_PORT3
//#define USCI_B1_PORT_SOMI_CLK_SCL		GPIO_PORT5
#endif

#if defined (__MSP430_HAS_USCI__)
// Interrupt Control
USCI_interrupt_t volatile * const p_USCI_B1_INTERRUPT =
		(USCI_interrupt_t *) USCI_B1_INTERRUPT_CONTROL_BASE_ADDRESS;
//#define USCI_B1_INTERRUPT	(*p_USCI_B1_INTERRUPT)
#endif // defined (__MSP430_HAS_USCI__)
#endif
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B1 Struct Overlay Declaration	 								 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B2 Struct Overlay Declaration	 									 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B2__) || defined (__MSP430_HAS_USCI_AB2__)

// Peripheral Control
USCI_control_t volatile * const p_USCI_B2_CONTROL =
		(USCI_control_t *) USCI_B2_PERIPHERAL_CONTROL_BASE_ADDRESS;
//#define USCI_B2_CONTROL		(*p_USCI_B2_CONTROL)

// GPIO Control
//#if defined (__MSP430F5438A__) || defined (__MSP430F5438__)
//#define USCI_B2_PORT		GPIO_PORT9
//#endif

#if defined (__MSP430_HAS_USCI__)
// Interrupt Control
USCI_interrupt_t volatile * const p_USCI_B2_INTERRUPT =
		(USCI_interrupt_t *) USCI_B2_INTERRUPT_CONTROL_BASE_ADDRESS;
//#define USCI_B2_INTERRUPT	(*p_USCI_B2_INTERRUPT)
#endif // defined (__MSP430_HAS_USCI__)
#endif
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B2 Struct Overlay Declaration	 								 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B3 Struct Overlay Declaration	 									 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B3__) || defined (__MSP430_HAS_USCI_AB3__)

// Peripheral Control
USCI_control_t volatile * const p_USCI_B3_CONTROL =
		(USCI_control_t *) USCI_B3_PERIPHERAL_CONTROL_BASE_ADDRESS;
//#define USCI_B3_CONTROL		(*p_USCI_B3_CONTROL)

// GPIO Control
//#if defined (__MSP430F5438A__) || defined (__MSP430F5438__)
//#define USCI_B3_PORT		GPIO_PORT10
//#endif

#if defined (__MSP430_HAS_USCI__)
// Interrupt Control
USCI_interrupt_t volatile * const p_USCI_B3_INTERRUPT =
		(USCI_interrupt_t *) USCI_B3_INTERRUPT_CONTROL_BASE_ADDRESS;
//#define USCI_B3_INTERRUPT	(*p_USCI_B3_INTERRUPT)
#endif // defined (__MSP430_HAS_USCI__)
#endif
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B3 Struct Overlay Declaration	 								 */
/*                                                                           */
/*****************************************************************************/
/*****************************************************************************/
//	END: Struct Overlay Declarations for Peripheral Register Access


/*****************************************************************************/
//	Function Prototypes
/*****************************************************************************/
/*****************************************************************************/
/*                                                                           */
/*	USCI Function Prototypes												 */
/*                                                                           */
/*****************************************************************************/
#if (defined (__MSP430_HAS_USCI__) && !(defined (__MSP430_HAS_USCI_AB0__) || \
										defined (__MSP430_HAS_USCI_AB1__) || \
										defined (__MSP430_HAS_USCI_A0__) || \
										defined (__MSP430_HAS_USCI_A1__) || \
										defined (__MSP430_HAS_USCI_B0__) || \
										defined (__MSP430_HAS_USCI_B1__)))
#if defined (__USING_USCI__)
void USCI_init (uint8_t mode, USCI_Ax_UART_config_t* USCI_config);
void USCI_init_UART_mode (USCI_Ax_UART_config_t* USCI_config);
void USCI_init_SPI_mode (USCI_Ax_UART_config_t* USCI_config);
void USCI_disable_TX_interrupt (void);
void USCI_enable_TX_interrupt (void);
void USCI_disable_RX_interrupt (void);
void USCI_enable_RX_interrupt (void);
void USCI_clear_TX_interrupt_flag (void);
void USCI_clear_RX_interrupt_flag (void);
void USCI_write_TX_buffer (uint8_t data);
uint8_t USCI_read_RX_buffer (void);
uint8_t USCI_read_busy_flag (void);
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI Function Prototypes											 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A0 Function Prototypes												 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A0__) || defined (__MSP430_HAS_USCI_AB0__)
#if defined (__USING_USCI_A0__)
void USCI_A0_init(uint8_t mode, void* USCI_config);
void USCI_A0_init_UART_mode (USCI_Ax_UART_config_t* USCI_config);
void USCI_A0_init_SPI_mode (USCI_Ax_SPI_config_t* USCI_config);
void USCI_A0_disable_TX_interrupt(void);
void USCI_A0_enable_TX_interrupt(void);
void USCI_A0_disable_RX_interrupt(void);
void USCI_A0_enable_RX_interrupt(void);
void USCI_A0_clear_TX_interrupt_flag(void);
void USCI_A0_clear_RX_interrupt_flag(void);
void USCI_A0_write_TX_buffer(uint8_t data);
uint8_t USCI_A0_read_RX_buffer(void);
uint8_t USCI_A0_read_busy_flag(void);
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A0 Function Prototypes										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A1 Function Prototypes												 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A1__) || defined (__MSP430_HAS_USCI_AB1__)
#if defined (__USING_USCI_A1__)
void USCI_A1_init(uint8_t mode, void* USCI_config);
void USCI_A1_init_UART_mode (USCI_Ax_UART_config_t* USCI_config);
void USCI_A1_init_SPI_mode (USCI_Ax_SPI_config_t* USCI_config);
void USCI_A1_disable_TX_interrupt(void);
void USCI_A1_enable_TX_interrupt(void);
void USCI_A1_disable_RX_interrupt(void);
void USCI_A1_enable_RX_interrupt(void);
void USCI_A1_clear_TX_interrupt_flag(void);
void USCI_A1_clear_RX_interrupt_flag(void);
void USCI_A1_write_TX_buffer(uint8_t data);
uint8_t USCI_A1_read_RX_buffer(void);
uint8_t USCI_A1_read_busy_flag(void);
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A1 Function Prototypes										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A2 Function Prototypes												 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A2__) || defined (__MSP430_HAS_USCI_AB2__)
#if defined (__USING_USCI_A2__)
void USCI_A2_init(uint8_t mode, void* USCI_config);
void USCI_A2_init_UART_mode (USCI_Ax_UART_config_t* USCI_config);
void USCI_A2_init_SPI_mode (USCI_Ax_SPI_config_t* USCI_config);
void USCI_A2_disable_TX_interrupt(void);
void USCI_A2_enable_TX_interrupt(void);
void USCI_A2_disable_RX_interrupt(void);
void USCI_A2_enable_RX_interrupt(void);
void USCI_A2_clear_TX_interrupt_flag(void);
void USCI_A2_clear_RX_interrupt_flag(void);
void USCI_A2_write_TX_buffer(uint8_t data);
uint8_t USCI_A2_read_RX_buffer(void);
uint8_t USCI_A2_read_busy_flag(void);
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A2 Function Prototypes										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A3 Function Prototypes												 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A3__) || defined (__MSP430_HAS_USCI_AB3__)
#if defined (__USING_USCI_A3__)
void USCI_A3_init(uint8_t mode, void* USCI_config);
void USCI_A3_init_UART_mode (USCI_Ax_UART_config_t* USCI_config);
void USCI_A3_init_SPI_mode (USCI_Ax_SPI_config_t* USCI_config);
void USCI_A3_disable_TX_interrupt(void);
void USCI_A3_enable_TX_interrupt(void);
void USCI_A3_disable_RX_interrupt(void);
void USCI_A3_enable_RX_interrupt(void);
void USCI_A3_clear_TX_interrupt_flag(void);
void USCI_A3_clear_RX_interrupt_flag(void);
void USCI_A3_write_TX_buffer(uint8_t data);
uint8_t USCI_A3_read_RX_buffer(void);
uint8_t USCI_A3_read_busy_flag(void);
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A3 Function Prototypes										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B0 Function Prototypes												 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B0__) || defined (__MSP430_HAS_USCI_AB0__)
#if defined (__USING_USCI_B0__)
void USCI_B0_init(uint8_t mode, void* USCI_config);
void USCI_B0_init_SPI_mode (USCI_Bx_SPI_config_t* USCI_config);
void USCI_B0_init_I2C_mode (USCI_Bx_I2C_config_t* USCI_config);
void USCI_B0_disable_TX_interrupt(void);
void USCI_B0_enable_TX_interrupt(void);
void USCI_B0_disable_RX_interrupt(void);
void USCI_B0_enable_RX_interrupt(void);
void USCI_B0_clear_TX_interrupt_flag(void);
void USCI_B0_clear_RX_interrupt_flag(void);
void USCI_B0_write_TX_buffer(uint8_t data);
uint8_t USCI_B0_read_RX_buffer(void);
uint8_t USCI_B0_read_busy_flag(void);
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B0 Function Prototypes										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B1 Function Prototypes												 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B1__) || defined (__MSP430_HAS_USCI_AB1__)
#if defined (__USING_USCI_B1__)
void USCI_B1_init(uint8_t mode, void* USCI_config);
void USCI_B1_init_I2C_mode (USCI_Bx_I2C_config_t* USCI_config);
void USCI_B1_init_SPI_mode (USCI_Bx_SPI_config_t* USCI_config);
void USCI_B1_disable_TX_interrupt(void);
void USCI_B1_enable_TX_interrupt(void);
void USCI_B1_disable_RX_interrupt(void);
void USCI_B1_enable_RX_interrupt(void);
void USCI_B1_clear_TX_interrupt_flag(void);
void USCI_B1_clear_RX_interrupt_flag(void);
void USCI_B1_write_TX_buffer(uint8_t data);
uint8_t USCI_B1_read_RX_buffer(void);
uint8_t USCI_B1_read_busy_flag(void);
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B1 Function Prototypes										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B2 Function Prototypes												 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B2__) || defined (__MSP430_HAS_USCI_AB2__)
#if defined (__USING_USCI_B2__)
void USCI_B2_init(uint8_t mode, void* USCI_config);
void USCI_B2_init_SPI_mode (USCI_Bx_SPI_config_t* USCI_config);
void USCI_B2_init_I2C_mode (USCI_Bx_I2C_config_t* USCI_config);
void USCI_B2_disable_TX_interrupt(void);
void USCI_B2_enable_TX_interrupt(void);
void USCI_B2_disable_RX_interrupt(void);
void USCI_B2_enable_RX_interrupt(void);
void USCI_B2_clear_TX_interrupt_flag(void);
void USCI_B2_clear_RX_interrupt_flag(void);
void USCI_B2_write_TX_buffer(uint8_t data);
uint8_t USCI_B2_read_RX_buffer(void);
uint8_t USCI_B2_read_busy_flag(void);
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B2 Function Prototypes										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B3 Function Prototypes												 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B3__) || defined (__MSP430_HAS_USCI_AB3__)
#if defined (__USING_USCI_B3__)
void USCI_B3_init(uint8_t mode, void* USCI_config);
void USCI_B3_init_SPI_mode (USCI_Bx_SPI_config_t* USCI_config);
void USCI_B3_init_I2C_mode (USCI_Bx_I2C_config_t* USCI_config);
void USCI_B3_disable_TX_interrupt(void);
void USCI_B3_enable_TX_interrupt(void);
void USCI_B3_disable_RX_interrupt(void);
void USCI_B3_enable_RX_interrupt(void);
void USCI_B3_clear_TX_interrupt_flag(void);
void USCI_B3_clear_RX_interrupt_flag(void);
void USCI_B3_write_TX_buffer(uint8_t data);
uint8_t USCI_B3_read_RX_buffer(void);
uint8_t USCI_B3_read_busy_flag(void);
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B3 Function Prototypes										 */
/*                                                                           */
/*****************************************************************************/
/*****************************************************************************/
//	End Function Prototypes


/*****************************************************************************/
//	Function Definitions
/*****************************************************************************/
/*****************************************************************************/
/*                                                                           */
/*	USCI Function Definitions												 */
/*                                                                           */
/*****************************************************************************/
#if (defined (__MSP430_HAS_USCI__) && !(defined (__MSP430_HAS_USCI_AB0__) || \
										defined (__MSP430_HAS_USCI_AB1__) || \
										defined (__MSP430_HAS_USCI_A0__) || \
										defined (__MSP430_HAS_USCI_A1__) || \
										defined (__MSP430_HAS_USCI_B0__) || \
										defined (__MSP430_HAS_USCI_B1__)))
#if defined (__USING_USCI__)
void USCI_init (uint8_t mode)
{
	switch(mode)
	{
		case USCI_UART_MODE:
			USCI_PORT.select |= USCI_RX_PIN | USCI_TX_PIN;			// Select UART pins
			#if defined (__MSP430G2553__)
			P1SEL2 |= USCI_RX_PIN | USCI_TX_PIN;		// Select UART pins
			#endif
			USCI_CONTROL.control_1 |= UCSSEL_2;							// UCLK = SMCLK
			USCI_CONTROL.baud_rate_control_0 = 109;						// 1MHz 9600
			USCI_CONTROL.baud_rate_control_1 = 0;						// 1MHz 9600
			USCI_CONTROL.modulation_control = UCBRS2 + UCBRS0;			// Modulation
			USCI_CONTROL.control_1 &= ~UCSWRST;							// Initialize USCI
			USCI_INTERRUPT.flag_2 &= ~(USCI_TX_IE_BIT | USCI_RX_IE_BIT);
			USCI_INTERRUPT.enable_2 &= ~(USCI_TX_IE_BIT | USCI_RX_IE_BIT);
			break;

		case USCI_I2C_MODE:
			break;

		default:
			// Use assert.h here to raise a warning that an invalid mode has been specified.
			//assert( mode != USCI_UART_MODE );
			//assert( mode != USCI_I2C_MODE );
			_NOP();
	}
}


void USCI_enable_TX_interrupt (void)
{
	USCI_INTERRUPT.enable_2 |= USCI_TX_IE_BIT;
}


void USCI_disable_TX_interrupt (void)
{
	USCI_INTERRUPT.enable_2 &= ~USCI_TX_IE_BIT;
}


void USCI_enable_RX_interrupt (void)
{
	USCI_INTERRUPT.enable_2 |= USCI_RX_IE_BIT;
}


void USCI_disable_RX_interrupt (void)
{
	USCI_INTERRUPT.enable_2 &= ~USCI_RX_IE_BIT;
}


void USCI_clear_TX_interrupt_flag (void)
{
	USCI_INTERRUPT.flag_2 &= ~USCI_TX_INTERRUPT_FLAG;
}


void USCI_clear_RX_interrupt_flag (void)
{
	USCI_INTERRUPT.flag_2 &= ~USCI_RX_INTERRUPT_FLAG;
}


void USCI_write_TX_buffer (uint8_t data)
{
	USCI_CONTROL.transmit_buffer = data;
}


uint8_t USCI_read_RX_buffer (void)
{
	uint8_t data;

	data = USCI_CONTROL.receive_buffer;
	return data;
}


uint8_t USCI_read_busy_flag (void)
{
	uint8_t flag;

	flag = USCI_CONTROL.status_register & USCI_BUSY_FLAG;
	return flag;
}
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI Function Definitions											 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A0 Function Definitions											 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A0__) || defined (__MSP430_HAS_USCI_AB0__)
#if defined (__USING_USCI_A0__) || defined (__USING_USCI_AB0__)
void USCI_A0_init (uint8_t mode, void* USCI_config)
{
	switch(mode)
	{
		case USCI_UART_MODE:
			USCI_A0_init_UART_mode((USCI_Ax_UART_config_t*)USCI_config);
			break;
		case USCI_SPI_MODE:
			USCI_A0_init_SPI_mode((USCI_Ax_SPI_config_t*)USCI_config);
			break;
		default:
			// Use assert.h here to raise a warning that an invalid mode has been specified.
			_NOP();
	}
}


void USCI_A0_init_UART_mode (USCI_Ax_UART_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_A0_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430F5438__) || defined (__MSP430F5438A__)
	// Clear io register select bits
	USCI_A0_PORT.select &= ~(USCI_A0_RX_PIN | USCI_A0_TX_PIN);

	// Set io register select bits
	USCI_A0_PORT.select |= (*USCI_config).IO_pins;
#elif defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_A0_PORT.select &= ~(USCI_A0_RX_PIN | USCI_A0_TX_PIN);

	// Clear io register select_2 bits
	USCI_A0_PORT.select_2 &= ~(USCI_A0_RX_PIN | USCI_A0_TX_PIN);

	// Set io register select bits
	USCI_A0_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_A0_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_A0_PORT.select &= ~(USCI_A0_RX_PIN | USCI_A0_TX_PIN);

	// Set io register select bits
	USCI_A0_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_A0_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_A0_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_A0_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_A0_CONTROL.control_0 |= (*USCI_config).stop_bits;
	USCI_A0_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_A0_CONTROL.control_0 |= (*USCI_config).bit_order;
	USCI_A0_CONTROL.control_0 |= (*USCI_config).parity_select;
	USCI_A0_CONTROL.control_0 |= (*USCI_config).parity_enable;

	// Clear USCI clock source selection
	USCI_A0_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_A0_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_A0_CONTROL.baud_rate_control_0 =
		(0x00FF & (*USCI_config).baud_rate_control);
	USCI_A0_CONTROL.baud_rate_control_1 =
		((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

	// Configure modulation control register
	USCI_A0_CONTROL.modulation_control = (*USCI_config).modulation_control;

#if defined (__MSP430_HAS_USCI_AB1__)
	// Clear USCI interrupt enable bits
	USCI_A0_INTERRUPT.Ax_Bx_interrupt_flag &=
		~(USCI_A0_TX_IE_BIT | USCI_A0_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_A0_INTERRUPT.Ax_Bx_interrupt_enable &=
		~(USCI_A0_TX_IE_BIT | USCI_A0_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_A0_INTERRUPT.Ax_Bx_interrupt_enable |=
		(*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_A0__)
	// Clear USCI interrupt enable bits
	USCI_A0_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_A0_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_A0_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_A0_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_A0_init_SPI_mode (USCI_Ax_SPI_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_A0_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_A0_PORT.select &=
		~(USCI_A0_SOMI_PIN | USCI_A0_SIMO_PIN | USCI_A0_STE_PIN |
		USCI_A0_CLK_PIN);

	// Clear io register select_2 bits
	USCI_A0_PORT.select_2 &=
		~(USCI_A0_SOMI_PIN | USCI_A0_SIMO_PIN | USCI_A0_STE_PIN |
		USCI_A0_CLK_PIN);

	// Set io register select bits
	USCI_A0_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_A0_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_A0_PORT.select &=
		~(USCI_A0_SOMI_PIN | USCI_A0_SIMO_PIN | USCI_A0_STE_PIN |
		USCI_A0_CLK_PIN);

	// Set io register select bits
	USCI_A0_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_A0_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_A0_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_A0_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_A0_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_A0_CONTROL.control_0 |= (*USCI_config).bit_order;

	// Clear USCI clock source selection
	USCI_A0_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_A0_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_A0_CONTROL.baud_rate_control_0 =
		(0x00FF & (*USCI_config).baud_rate_control);
	USCI_A0_CONTROL.baud_rate_control_1 =
		((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

#if defined (__MSP430_HAS_USCI_AB1__)
	// Clear USCI interrupt enable bits
	USCI_A0_INTERRUPT.Ax_Bx_interrupt_flag &=
		~(USCI_A0_TX_IE_BIT | USCI_A0_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_A0_INTERRUPT.Ax_Bx_interrupt_enable &=
		~(USCI_A0_TX_IE_BIT | USCI_A0_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_A0_INTERRUPT.Ax_Bx_interrupt_enable |=
		(*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_A0__)
	// Clear USCI interrupt enable bits
	USCI_A0_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_A0_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_A0_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_A0_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_A0_enable_TX_interrupt (void)
{
	USCI_A0_CONTROL.interrupt_enable |= USCI_A0_TX_IE_BIT;
}


void USCI_A0_disable_TX_interrupt (void)
{
	USCI_A0_CONTROL.interrupt_enable &= ~USCI_A0_TX_IE_BIT;
}


void USCI_A0_enable_RX_interrupt (void)
{
	USCI_A0_CONTROL.interrupt_enable |= USCI_A0_RX_IE_BIT;
}


void USCI_A0_disable_RX_interrupt (void)
{
	USCI_A0_CONTROL.interrupt_enable &= ~USCI_A0_RX_IE_BIT;
}


void USCI_A0_clear_TX_interrupt_flag (void)
{
	USCI_A0_CONTROL.interrupt_flag &= ~USCI_A0_TX_INTERRUPT_FLAG;
}


void USCI_A0_clear_RX_interrupt_flag (void)
{
	USCI_A0_CONTROL.interrupt_flag &= ~USCI_A0_RX_INTERRUPT_FLAG;
}


void USCI_A0_write_TX_buffer (uint8_t data)
{
	USCI_A0_CONTROL.transmit_buffer = data;
}


uint8_t USCI_A0_read_RX_buffer (void)
{
	uint8_t data;

	data = USCI_A0_CONTROL.receive_buffer;
	return data;
}


uint8_t USCI_A0_read_busy_flag (void)
{
	uint8_t flag;

	flag = USCI_A0_CONTROL.status_register & USCI_A0_BUSY_FLAG;
	return flag;
}
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A0 Function Definitions										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A1 Function Definitions											 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A1__) || defined (__MSP430_HAS_USCI_AB1__)
#if defined (__USING_USCI_A1__) || defined (__USING_USCI_AB1__)
void USCI_A1_init (uint8_t mode, void* USCI_config)
{
	switch(mode)
	{
		case USCI_UART_MODE:
			USCI_A1_init_UART_mode((USCI_Ax_UART_config_t*)USCI_config);
			break;
		case USCI_SPI_MODE:
			USCI_A1_init_SPI_mode((USCI_Ax_SPI_config_t*)USCI_config);
			break;
		default:
			// Use assert.h here to raise a warning that an invalid mode has been specified.
			_NOP();
	}
}


void USCI_A1_init_UART_mode (USCI_Ax_UART_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_A1_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430F5438__) || defined (__MSP430F5438A__)
	// Clear other io register select bits
	(*USCI_A1_PORT.simo_somi_ste_rx_tx).select &=
			~(USCI_A1_RX_PIN | USCI_A1_TX_PIN);

	// Set other io register select bits
	(*USCI_A1_PORT.simo_somi_ste_rx_tx).select |=
			((*USCI_config).IO_pins & (USCI_A1_RX_PIN | USCI_A1_TX_PIN));
#elif defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_A1_PORT.select &= ~(USCI_A1_RX_PIN | USCI_A1_TX_PIN);

	// Clear io register select_2 bits
	USCI_A1_PORT.select_2 &= ~(USCI_A1_RX_PIN | USCI_A1_TX_PIN);

	// Set io register select bits
	USCI_A1_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_A1_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_A1_PORT.select &= ~(USCI_A1_RX_PIN | USCI_A1_TX_PIN);

	// Set io register select bits
	USCI_A1_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_A1_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_A1_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_A1_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_A1_CONTROL.control_0 |= (*USCI_config).stop_bits;
	USCI_A1_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_A1_CONTROL.control_0 |= (*USCI_config).bit_order;
	USCI_A1_CONTROL.control_0 |= (*USCI_config).parity_select;
	USCI_A1_CONTROL.control_0 |= (*USCI_config).parity_enable;

	// Clear USCI clock source selection
	USCI_A1_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_A1_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_A1_CONTROL.baud_rate_control_0 = (0x00FF & (*USCI_config).baud_rate_control);
	USCI_A1_CONTROL.baud_rate_control_1 = ((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

	// Configure modulation control register
	USCI_A1_CONTROL.modulation_control = (*USCI_config).modulation_control;

#if defined (__MSP430_HAS_USCI_AB1__)
	// Clear USCI interrupt enable bits
	USCI_A1_INTERRUPT.Ax_Bx_interrupt_flag &= ~(USCI_A1_TX_IE_BIT | USCI_A1_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_A1_INTERRUPT.Ax_Bx_interrupt_enable &= ~(USCI_A1_TX_IE_BIT | USCI_A1_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_A1_INTERRUPT.Ax_Bx_interrupt_enable |= (*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_A1__)
	// Clear USCI interrupt enable bits
	USCI_A1_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_A1_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_A1_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_A1_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_A1_init_SPI_mode (USCI_Ax_SPI_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_A1_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430F5438__) || defined (__MSP430F5438A__)
	// Clear other io register select bits
	(*USCI_A1_PORT.simo_somi_ste_rx_tx).select &=
		~(USCI_A1_SOMI_PIN | USCI_A1_SIMO_PIN | USCI_A1_STE_PIN);

	// Clear other io register select bits
	(*USCI_A1_PORT.clk).select &=
		~USCI_A1_CLK_PIN;

	// Set other io register select bits
	(*USCI_A1_PORT.simo_somi_ste_rx_tx).select |=
		((*USCI_config).IO_pins &
		(USCI_A1_SOMI_PIN | USCI_A1_SIMO_PIN | USCI_A1_STE_PIN));

	// Set other io register select bits
	(*USCI_A1_PORT.clk).select |=
		(*USCI_config).IO_pins &
		USCI_A1_CLK_PIN;

#elif defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_A1_PORT.select &=
		~(USCI_A1_SOMI_PIN | USCI_A1_SIMO_PIN | USCI_A1_STE_PIN |
		USCI_A1_CLK_PIN);

	// Clear io register select_2 bits
	USCI_A1_PORT.select_2 &=
		~(USCI_A1_SOMI_PIN | USCI_A1_SIMO_PIN | USCI_A1_STE_PIN |
		USCI_A1_CLK_PIN);

	// Set io register select bits
	USCI_A1_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_A1_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_A1_PORT.select &=
		~(USCI_A1_SOMI_PIN | USCI_A1_SIMO_PIN | USCI_A1_STE_PIN |
		USCI_A1_CLK_PIN);

	// Set io register select bits
	USCI_A1_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_A1_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_A1_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_A1_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_A1_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_A1_CONTROL.control_0 |= (*USCI_config).bit_order;

	// Clear USCI clock source selection
	USCI_A1_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_A1_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_A1_CONTROL.baud_rate_control_0 = (0x00FF & (*USCI_config).baud_rate_control);
	USCI_A1_CONTROL.baud_rate_control_1 = ((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

#if defined (__MSP430_HAS_USCI_AB1__)
	// Clear USCI interrupt enable bits
	USCI_A1_INTERRUPT.Ax_Bx_interrupt_flag &= ~(USCI_A1_TX_IE_BIT | USCI_A1_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_A1_INTERRUPT.Ax_Bx_interrupt_enable &= ~(USCI_A1_TX_IE_BIT | USCI_A1_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_A1_INTERRUPT.Ax_Bx_interrupt_enable |= (*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_A1__)
	// Clear USCI interrupt enable bits
	USCI_A1_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_A1_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_A1_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_A1_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_A1_enable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB1__)
	USCI_A1_INTERRUPT.Ax_Bx_interrupt_enable |= USCI_A1_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A1__)
	USCI_A1_CONTROL.interrupt_enable |= USCI_A1_TX_IE_BIT;
#endif
}


void USCI_A1_disable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB1__)
	USCI_A1_INTERRUPT.Ax_Bx_interrupt_enable &= ~USCI_A1_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A1__)
	USCI_A1_CONTROL.interrupt_enable &= ~USCI_A1_TX_IE_BIT;
#endif
}


void USCI_A1_enable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB1__)
	USCI_A1_INTERRUPT.Ax_Bx_interrupt_enable |= USCI_A1_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A1__)
	USCI_A1_CONTROL.interrupt_enable |= USCI_A1_RX_IE_BIT;
#endif
}


void USCI_A1_disable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB1__)
	USCI_A1_INTERRUPT.Ax_Bx_interrupt_enable &= ~USCI_A1_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A1__)
	USCI_A1_CONTROL.interrupt_enable &= ~USCI_A1_RX_IE_BIT;
#endif
}


void USCI_A1_clear_TX_interrupt_flag(void)
{
#if defined (__MSP430_HAS_USCI_AB1__)
	USCI_A1_INTERRUPT.Ax_Bx_interrupt_flag &= ~USCI_A1_TX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_A1__)
	USCI_A1_CONTROL.interrupt_flag &= ~USCI_A1_TX_INTERRUPT_FLAG;
#endif
}


void USCI_A1_clear_RX_interrupt_flag (void)
{
#if defined (__MSP430_HAS_USCI_AB1__)
	USCI_A1_INTERRUPT.Ax_Bx_interrupt_flag &= ~USCI_A1_RX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_A1__)
	USCI_A1_CONTROL.interrupt_flag &= ~USCI_A1_RX_INTERRUPT_FLAG;
#endif
}


void USCI_A1_write_TX_buffer (uint8_t data)
{
	USCI_A1_CONTROL.transmit_buffer = data;
}


uint8_t USCI_A1_read_RX_buffer (void)
{
	uint8_t data;

	data = USCI_A1_CONTROL.receive_buffer;
	return data;
}


uint8_t USCI_A1_read_busy_flag (void)
{
	uint8_t flag;

	flag = USCI_A1_CONTROL.status_register & USCI_A1_BUSY_FLAG;
	return flag;
}
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A1 Function Definitions										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A2 Function Definitions											 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A2__) || defined (__MSP430_HAS_USCI_AB2__)
#if defined (__USING_USCI_A2__) || defined (__USING_USCI_AB2__)
void USCI_A2_init (uint8_t mode, void* USCI_config)
{
	switch(mode)
	{
		case USCI_UART_MODE:
			USCI_A2_init_UART_mode((USCI_Ax_UART_config_t*)USCI_config);
			break;
		case USCI_SPI_MODE:
			USCI_A2_init_SPI_mode((USCI_Ax_SPI_config_t*)USCI_config);
			break;
		default:
			// Use assert.h here to raise a warning that an invalid mode has been specified.
			_NOP();
	}
}


void USCI_A2_init_UART_mode (USCI_Ax_UART_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_A2_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430F5438__) || defined (__MSP430F5438A__)
	// Clear io register select bits
	USCI_A2_PORT.select &= ~(USCI_A2_RX_PIN | USCI_A2_TX_PIN);

	// Set io register select bits
	USCI_A2_PORT.select |= (*USCI_config).IO_pins;
#elif defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_A2_PORT.select &= ~(USCI_A2_RX_PIN | USCI_A2_TX_PIN);

	// Clear io register select_2 bits
	USCI_A2_PORT.select_2 &= ~(USCI_A2_RX_PIN | USCI_A2_TX_PIN);

	// Set io register select bits
	USCI_A2_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_A2_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_A2_PORT.select &= ~(USCI_A2_RX_PIN | USCI_A2_TX_PIN);

	// Set io register select bits
	USCI_A2_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_A2_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_A2_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_A2_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_A2_CONTROL.control_0 |= (*USCI_config).stop_bits;
	USCI_A2_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_A2_CONTROL.control_0 |= (*USCI_config).bit_order;
	USCI_A2_CONTROL.control_0 |= (*USCI_config).parity_select;
	USCI_A2_CONTROL.control_0 |= (*USCI_config).parity_enable;

	// Clear USCI clock source selection
	USCI_A2_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_A2_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_A2_CONTROL.baud_rate_control_0 =
		(0x00FF & (*USCI_config).baud_rate_control);
	USCI_A2_CONTROL.baud_rate_control_1 =
		((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

	// Configure modulation control register
	USCI_A2_CONTROL.modulation_control = (*USCI_config).modulation_control;

#if defined (__MSP430_HAS_USCI_AB2__)
	// Clear USCI interrupt enable bits
	USCI_A2_INTERRUPT.Ax_Bx_interrupt_flag &=
		~(USCI_A2_TX_IE_BIT | USCI_A2_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_A2_INTERRUPT.Ax_Bx_interrupt_enable &=
		~(USCI_A2_TX_IE_BIT | USCI_A2_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_A2_INTERRUPT.Ax_Bx_interrupt_enable |=
		(*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_A2__)
	// Clear USCI interrupt enable bits
	USCI_A2_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_A2_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_A2_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_A2_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_A2_init_SPI_mode (USCI_Ax_SPI_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_A2_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_A2_PORT.select &=
		~(USCI_A2_SOMI_PIN | USCI_A2_SIMO_PIN | USCI_A2_STE_PIN |
		USCI_A2_CLK_PIN);

	// Clear io register select_2 bits
	USCI_A2_PORT.select_2 &=
		~(USCI_A2_SOMI_PIN | USCI_A2_SIMO_PIN | USCI_A2_STE_PIN |
		USCI_A2_CLK_PIN);

	// Set io register select bits
	USCI_A2_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_A2_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_A2_PORT.select &=
		~(USCI_A2_SOMI_PIN | USCI_A2_SIMO_PIN | USCI_A2_STE_PIN |
		USCI_A2_CLK_PIN);

	// Set io register select bits
	USCI_A2_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_A2_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_A2_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_A2_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_A2_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_A2_CONTROL.control_0 |= (*USCI_config).bit_order;

	// Clear USCI clock source selection
	USCI_A2_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_A2_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_A2_CONTROL.baud_rate_control_0 =
		(0x00FF & (*USCI_config).baud_rate_control);
	USCI_A2_CONTROL.baud_rate_control_1 =
		((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

#if defined (__MSP430_HAS_USCI_AB2__)
	// Clear USCI interrupt enable bits
	USCI_A2_INTERRUPT.Ax_Bx_interrupt_flag &=
		~(USCI_A2_TX_IE_BIT | USCI_A2_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_A2_INTERRUPT.Ax_Bx_interrupt_enable &=
		~(USCI_A2_TX_IE_BIT | USCI_A2_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_A2_INTERRUPT.Ax_Bx_interrupt_enable |=
		(*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_A2__)
	// Clear USCI interrupt enable bits
	USCI_A2_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_A2_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_A2_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_A2_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_A2_enable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB2__)
	USCI_A2_INTERRUPT.Ax_Bx_interrupt_enable |= USCI_A2_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A2__)
	USCI_A2_CONTROL.interrupt_enable |= USCI_A2_TX_IE_BIT;
#endif
}


void USCI_A2_disable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB2__)
	USCI_A2_INTERRUPT.Ax_Bx_interrupt_enable &= ~USCI_A2_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A2__)
	USCI_A2_CONTROL.interrupt_enable &= ~USCI_A2_TX_IE_BIT;
#endif
}


void USCI_A2_enable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB2__)
	USCI_A2_INTERRUPT.Ax_Bx_interrupt_enable |= USCI_A2_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A2__)
	USCI_A2_CONTROL.interrupt_enable |= USCI_A2_RX_IE_BIT;
#endif
}


void USCI_A2_disable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB2__)
	USCI_A2_INTERRUPT.Ax_Bx_interrupt_enable &= ~USCI_A2_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A2__)
	USCI_A2_CONTROL.interrupt_enable &= ~USCI_A2_RX_IE_BIT;
#endif
}


void USCI_A2_clear_TX_interrupt_flag(void)
{
#if defined (__MSP430_HAS_USCI_AB2__)
	USCI_A2_INTERRUPT.Ax_Bx_interrupt_flag &= ~USCI_A2_TX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_A2__)
	USCI_A2_CONTROL.interrupt_flag &= ~USCI_A2_TX_INTERRUPT_FLAG;
#endif
}


void USCI_A2_clear_RX_interrupt_flag (void)
{
#if defined (__MSP430_HAS_USCI_AB2__)
	USCI_A2_INTERRUPT.Ax_Bx_interrupt_flag &= ~USCI_A2_RX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_A2__)
	USCI_A2_CONTROL.interrupt_flag &= ~USCI_A2_RX_INTERRUPT_FLAG;
#endif
}


void USCI_A2_write_TX_buffer (uint8_t data)
{
	USCI_A2_CONTROL.transmit_buffer = data;
}


uint8_t USCI_A2_read_RX_buffer (void)
{
	uint8_t data;

	data = USCI_A2_CONTROL.receive_buffer;
	return data;
}


uint8_t USCI_A2_read_busy_flag (void)
{
	uint8_t flag;

	flag = USCI_A2_CONTROL.status_register & USCI_A2_BUSY_FLAG;
	return flag;
}
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A2 Function Definitions										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_A3 Function Definitions											 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_A3__) || defined (__MSP430_HAS_USCI_AB3__)
#if defined (__USING_USCI_A3__) || defined (__USING_USCI_AB3__)
void USCI_A3_init (uint8_t mode, void* USCI_config)
{
	switch(mode)
	{
		case USCI_UART_MODE:
			USCI_A3_init_UART_mode((USCI_Ax_UART_config_t*)USCI_config);
			break;
		case USCI_SPI_MODE:
			USCI_A3_init_SPI_mode((USCI_Ax_SPI_config_t*)USCI_config);
			break;
		default:
			// Use assert.h here to raise a warning that an invalid mode has been specified.
			_NOP();
	}
}


void USCI_A3_init_UART_mode (USCI_Ax_UART_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_A3_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430F5438__) || defined (__MSP430F5438A__)
	// Clear io register select bits
	USCI_A3_PORT.select &= ~(USCI_A3_RX_PIN | USCI_A3_TX_PIN);

	// Set io register select bits
	USCI_A3_PORT.select |= (*USCI_config).IO_pins;
#elif defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_A3_PORT.select &= ~(USCI_A3_RX_PIN | USCI_A3_TX_PIN);

	// Clear io register select_2 bits
	USCI_A3_PORT.select_2 &= ~(USCI_A3_RX_PIN | USCI_A3_TX_PIN);

	// Set io register select bits
	USCI_A3_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_A3_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_A3_PORT.select &= ~(USCI_A3_RX_PIN | USCI_A3_TX_PIN);

	// Set io register select bits
	USCI_A3_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_A3_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_A3_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_A3_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_A3_CONTROL.control_0 |= (*USCI_config).stop_bits;
	USCI_A3_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_A3_CONTROL.control_0 |= (*USCI_config).bit_order;
	USCI_A3_CONTROL.control_0 |= (*USCI_config).parity_select;
	USCI_A3_CONTROL.control_0 |= (*USCI_config).parity_enable;

	// Clear USCI clock source selection
	USCI_A3_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_A3_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_A3_CONTROL.baud_rate_control_0 =
		(0x00FF & (*USCI_config).baud_rate_control);
	USCI_A3_CONTROL.baud_rate_control_1 =
		((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

	// Configure modulation control register
	USCI_A3_CONTROL.modulation_control = (*USCI_config).modulation_control;

#if defined (__MSP430_HAS_USCI_AB3__)
	// Clear USCI interrupt enable bits
	USCI_A3_INTERRUPT.Ax_Bx_interrupt_flag &=
		~(USCI_A3_TX_IE_BIT | USCI_A3_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_A3_INTERRUPT.Ax_Bx_interrupt_enable &=
		~(USCI_A3_TX_IE_BIT | USCI_A3_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_A3_INTERRUPT.Ax_Bx_interrupt_enable |=
		(*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_A3__)
	// Clear USCI interrupt enable bits
	USCI_A3_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_A3_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_A3_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_A3_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_A3_init_SPI_mode (USCI_Ax_SPI_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_A3_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_A3_PORT.select &=
		~(USCI_A3_SOMI_PIN | USCI_A3_SIMO_PIN | USCI_A3_STE_PIN |
		USCI_A3_CLK_PIN);

	// Clear io register select_2 bits
	USCI_A3_PORT.select_2 &=
		~(USCI_A3_SOMI_PIN | USCI_A3_SIMO_PIN | USCI_A3_STE_PIN |
		USCI_A3_CLK_PIN);

	// Set io register select bits
	USCI_A3_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_A3_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_A3_PORT.select &=
		~(USCI_A3_SOMI_PIN | USCI_A3_SIMO_PIN | USCI_A3_STE_PIN |
		USCI_A3_CLK_PIN);

	// Set io register select bits
	USCI_A3_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_A3_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_A3_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_A3_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_A3_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_A3_CONTROL.control_0 |= (*USCI_config).bit_order;

	// Clear USCI clock source selection
	USCI_A3_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_A3_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_A3_CONTROL.baud_rate_control_0 =
		(0x00FF & (*USCI_config).baud_rate_control);
	USCI_A3_CONTROL.baud_rate_control_1 =
		((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

#if defined (__MSP430_HAS_USCI_AB3__)
	// Clear USCI interrupt enable bits
	USCI_A3_INTERRUPT.Ax_Bx_interrupt_flag &=
		~(USCI_A3_TX_IE_BIT | USCI_A3_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_A3_INTERRUPT.Ax_Bx_interrupt_enable &=
		~(USCI_A3_TX_IE_BIT | USCI_A3_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_A3_INTERRUPT.Ax_Bx_interrupt_enable |=
		(*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_A3__)
	// Clear USCI interrupt enable bits
	USCI_A3_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_A3_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_A3_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_A3_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_A3_enable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB3__)
	USCI_A3_INTERRUPT.Ax_Bx_interrupt_enable |= USCI_A3_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A3__)
	USCI_A3_CONTROL.interrupt_enable |= USCI_A3_TX_IE_BIT;
#endif
}


void USCI_A3_disable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB3__)
	USCI_A3_INTERRUPT.Ax_Bx_interrupt_enable &= ~USCI_A3_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A3__)
	USCI_A3_CONTROL.interrupt_enable &= ~USCI_A3_TX_IE_BIT;
#endif
}


void USCI_A3_enable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB3__)
	USCI_A3_INTERRUPT.Ax_Bx_interrupt_enable |= USCI_A3_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A3__)
	USCI_A3_CONTROL.interrupt_enable |= USCI_A3_RX_IE_BIT;
#endif
}


void USCI_A3_disable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB3__)
	USCI_A3_INTERRUPT.Ax_Bx_interrupt_enable &= ~USCI_A3_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A3__)
	USCI_A3_CONTROL.interrupt_enable &= ~USCI_A3_RX_IE_BIT;
#endif
}


void USCI_A3_clear_TX_interrupt_flag(void)
{
#if defined (__MSP430_HAS_USCI_AB3__)
	USCI_A3_INTERRUPT.Ax_Bx_interrupt_flag &= ~USCI_A3_TX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_A3__)
	USCI_A3_CONTROL.interrupt_flag &= ~USCI_A3_TX_INTERRUPT_FLAG;
#endif
}


void USCI_A3_clear_RX_interrupt_flag (void)
{
#if defined (__MSP430_HAS_USCI_AB3__)
	USCI_A3_INTERRUPT.Ax_Bx_interrupt_flag &= ~USCI_A3_RX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_A3__)
	USCI_A3_CONTROL.interrupt_flag &= ~USCI_A3_RX_INTERRUPT_FLAG;
#endif
}


void USCI_A3_write_TX_buffer (uint8_t data)
{
	USCI_A3_CONTROL.transmit_buffer = data;
}


uint8_t USCI_A3_read_RX_buffer (void)
{
	uint8_t data;

	data = USCI_A3_CONTROL.receive_buffer;
	return data;
}


uint8_t USCI_A3_read_busy_flag (void)
{
	uint8_t flag;

	flag = USCI_A3_CONTROL.status_register & USCI_A3_BUSY_FLAG;
	return flag;
}
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_A3 Function Definitions										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B0 Function Definitions											 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B0__) || defined (__MSP430_HAS_USCI_AB0__)
#if defined (__USING_USCI_B0__) || defined (__USING_USCI_AB0__)
void USCI_B0_init (uint8_t mode, void* USCI_config)
{
	switch(mode)
	{
		case USCI_I2C_MODE:
			USCI_B0_init_I2C_mode((USCI_Bx_I2C_config_t*)USCI_config);
			break;
		case USCI_SPI_MODE:
			USCI_B0_init_SPI_mode((USCI_Bx_SPI_config_t*)USCI_config);
			break;
		default:
			// Use assert.h here to raise a warning that an invalid mode has been specified.
			_NOP();
	}
}


void USCI_B0_init_I2C_mode (USCI_Bx_I2C_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_B0_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430F5438__) || defined (__MSP430F5438A__)
	// Clear io register select bits
	USCI_B0_PORT.select &= ~(USCI_B0_SCL_PIN | USCI_B0_SDA_PIN);

	// Set io register select bits
	USCI_B0_PORT.select |= (*USCI_config).IO_pins;
#elif defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_B0_PORT.select &= ~(USCI_B0_SCL_PIN | USCI_B0_SDA_PIN);

	// Clear io register select_2 bits
	USCI_B0_PORT.select_2 &= ~(USCI_B0_SCL_PIN | USCI_B0_SDA_PIN);

	// Set io register select bits
	USCI_B0_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_B0_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_B0_PORT.select &= ~(USCI_B0_SCL_PIN | USCI_B0_SDA_PIN);

	// Set io register select bits
	USCI_B0_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_B0_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_B0_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_B0_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_B0_CONTROL.control_0 |= (*USCI_config).master_mode;
	USCI_B0_CONTROL.control_0 |= (*USCI_config).multi_master;
	USCI_B0_CONTROL.control_0 |= (*USCI_config).slave_addressing_mode;
	USCI_B0_CONTROL.control_0 |= (*USCI_config).own_addressing_mode;

	// Clear USCI clock source selection
	USCI_B0_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_B0_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_B0_CONTROL.baud_rate_control_0 =
		(0x00FF & (*USCI_config).bit_rate_control);
	USCI_B0_CONTROL.baud_rate_control_1 =
		((0xFF00 & (*USCI_config).bit_rate_control) >> 8);

#if defined (__MSP430_HAS_USCI_AB0__)
	// Clear USCI interrupt enable bits
	USCI_B0_INTERRUPT.Ax_Bx_interrupt_flag &=
		~(USCI_B0_TX_IE_BIT | USCI_B0_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_B0_INTERRUPT.Ax_Bx_interrupt_enable &=
		~(USCI_B0_TX_IE_BIT | USCI_B0_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_B0_INTERRUPT.Ax_Bx_interrupt_enable |=
		(*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_B0__)
	// Clear USCI interrupt enable bits
	USCI_B0_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_B0_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_B0_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_B0_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_B0_init_SPI_mode (USCI_Bx_SPI_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_B0_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_B0_PORT.select &=
		~(USCI_B0_SOMI_PIN | USCI_B0_SIMO_PIN | USCI_B0_STE_PIN |
		USCI_B0_CLK_PIN);

	// Clear io register select_2 bits
	USCI_B0_PORT.select_2 &=
		~(USCI_B0_SOMI_PIN | USCI_B0_SIMO_PIN | USCI_B0_STE_PIN |
		USCI_B0_CLK_PIN);

	// Set io register select bits
	USCI_B0_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_B0_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_B0_PORT.select &=
		~(USCI_B0_SOMI_PIN | USCI_B0_SIMO_PIN | USCI_B0_STE_PIN |
		USCI_B0_CLK_PIN);

	// Set io register select bits
	USCI_B0_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_B0_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_B0_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_B0_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_B0_CONTROL.control_0 |= (*USCI_config).master_mode;
	USCI_B0_CONTROL.control_0 |= (*USCI_config).character_length;
	USCI_B0_CONTROL.control_0 |= (*USCI_config).bit_order;
	USCI_B0_CONTROL.control_0 |= (*USCI_config).clock_polarity;
	USCI_B0_CONTROL.control_0 |= (*USCI_config).clock_phase;

	// Clear USCI clock source selection
	USCI_B0_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_B0_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_B0_CONTROL.baud_rate_control_0 =
		(0x00FF & (*USCI_config).bit_rate_control);
	USCI_B0_CONTROL.baud_rate_control_1 =
		((0xFF00 & (*USCI_config).bit_rate_control) >> 8);

#if defined (__MSP430_HAS_USCI_AB0__)
	// Clear USCI interrupt enable bits
	USCI_B0_INTERRUPT.Ax_Bx_interrupt_flag &=
		~(USCI_B0_TX_IE_BIT | USCI_B0_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_B0_INTERRUPT.Ax_Bx_interrupt_enable &=
		~(USCI_B0_TX_IE_BIT | USCI_B0_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_B0_INTERRUPT.Ax_Bx_interrupt_enable |=
		(*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_B0__)
	// Clear USCI interrupt enable bits
	USCI_B0_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_B0_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_B0_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_B0_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_B0_enable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB0__)
	USCI_B0_INTERRUPT.enable_2 |= USCI_B0_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A0__)
	USCI_B0_CONTROL.interrupt_enable |= USCI_B0_TX_IE_BIT;
#endif
}


void USCI_B0_disable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB0__)
	USCI_B0_INTERRUPT.enable_2 &= ~USCI_B0_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A0__)
	USCI_B0_CONTROL.interrupt_enable &= ~USCI_B0_TX_IE_BIT;
#endif
}


void USCI_B0_enable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB0__)
	USCI_B0_INTERRUPT.enable_2 |= USCI_B0_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A0__)
	USCI_B0_CONTROL.interrupt_enable |= USCI_B0_RX_IE_BIT;
#endif
}


void USCI_B0_disable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB0__)
	USCI_B0_INTERRUPT.enable_2 &= ~USCI_B0_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A0__)
	USCI_B0_CONTROL.interrupt_enable &= ~USCI_B0_RX_IE_BIT;
#endif
}


void USCI_B0_clear_TX_interrupt_flag (void)
{
#if defined (__MSP430_HAS_USCI_AB0__)
	USCI_B0_INTERRUPT.flag_2 &= ~USCI_B0_TX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_A0__)
	USCI_B0_CONTROL.interrupt_flag &= ~USCI_B0_TX_INTERRUPT_FLAG;
#endif
}


void USCI_B0_clear_RX_interrupt_flag (void)
{
#if defined (__MSP430_HAS_USCI_AB0__)
	USCI_B0_INTERRUPT.flag_2 &= ~USCI_B0_RX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_A0__)
	USCI_B0_CONTROL.interrupt_flag &= ~USCI_B0_RX_INTERRUPT_FLAG;
#endif
}


void USCI_B0_write_TX_buffer (uint8_t data)
{
	USCI_B0_CONTROL.transmit_buffer = data;
}


uint8_t USCI_B0_read_RX_buffer (void)
{
	uint8_t data;

	data = USCI_B0_CONTROL.receive_buffer;
	return data;
}


uint8_t USCI_B0_read_busy_flag (void)
{
	uint8_t flag;

	flag = USCI_B0_CONTROL.status_register & USCI_B0_BUSY_FLAG;
	return flag;
}
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B0 Function Definitions										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B1 Function Definitions											 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B1__) || defined (__MSP430_HAS_USCI_AB1__)
#if defined (__USING_USCI_B1__) || defined (__USING_USCI_AB1__)
void USCI_B1_init (uint8_t mode, void* USCI_config)
{
	switch(mode)
	{
		case USCI_I2C_MODE:
			USCI_B1_init_I2C_mode((USCI_Bx_I2C_config_t*)USCI_config);
			break;
		case USCI_SPI_MODE:
			USCI_B1_init_SPI_mode((USCI_Bx_SPI_config_t*)USCI_config);
			break;
		default:
			// Use assert.h here to raise a warning that an invalid mode has been specified.
			_NOP();
	}
}


void USCI_B1_init_I2C_mode (USCI_Bx_I2C_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_B1_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430F5438__) || defined (__MSP430F5438A__)
	// Clear io register select bits
	(*USCI_B1_PORT.scl_somi_clk).select &=	~(USCI_B1_SCL_PIN);

	// Clear io register select bits
	(*USCI_B1_PORT.ste_simo_sda).select &=	~(USCI_B1_SDA_PIN);

	// Set io register select bits
	(*USCI_B1_PORT.scl_somi_clk).select |= USCI_B1_SCL_PIN;

	// Set io register select bits
	(*USCI_B1_PORT.ste_simo_sda).select |= USCI_B1_SDA_PIN;
#elif defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_B1_PORT.select &= ~(USCI_B1_SDA_PIN | USCI_B1_SCL_PIN);

	// Clear io register select_2 bits
	USCI_B1_PORT.select_2 &= ~(USCI_B1_SDA_PIN | USCI_B1_SCL_PIN);

	// Set io register select bits
	USCI_B1_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_B1_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_B1_PORT.select &= ~(USCI_B1_SDA_PIN | USCI_B1_SCL_PIN);

	// Set io register select bits
	USCI_B1_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_B1_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_B1_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_B1_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_B1_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_B1_CONTROL.control_0 |= (*USCI_config).bit_order;

	// Clear USCI clock source selection
	USCI_B1_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_B1_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_B1_CONTROL.baud_rate_control_0 = (0x00FF & (*USCI_config).baud_rate_control);
	USCI_B1_CONTROL.baud_rate_control_1 = ((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

#if defined (__MSP430_HAS_USCI_AB1__)
	// Clear USCI interrupt enable bits
	USCI_B1_INTERRUPT.Ax_Bx_interrupt_flag &= ~(USCI_B1_TX_IE_BIT | USCI_B1_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_B1_INTERRUPT.Ax_Bx_interrupt_enable &= ~(USCI_B1_TX_IE_BIT | USCI_B1_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_B1_INTERRUPT.Ax_Bx_interrupt_enable |= (*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_B1__)
	// Clear USCI interrupt enable bits
	USCI_B1_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_B1_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_B1_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_B1_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_B1_init_SPI_mode (USCI_Bx_SPI_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_B1_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430F5438__) || defined (__MSP430F5438A__)
	// Clear other io register select bits
	(*USCI_B1_PORT.scl_somi_clk).select &=
		~(USCI_B1_SOMI_PIN | USCI_B1_CLK_PIN);

	// Clear other io register select bits
	(*USCI_B1_PORT.ste_simo_sda).select &= ~USCI_B1_SIMO_PIN;

	// Set other io register select bits
	(*USCI_B1_PORT.scl_somi_clk).select |=
		((*USCI_config).IO_pins &
		(USCI_B1_SOMI_PIN | USCI_B1_CLK_PIN));

	// Set other io register select bits
	(*USCI_B1_PORT.ste_simo_sda).select |=
		(*USCI_config).IO_pins &
		USCI_B1_SIMO_PIN;

#elif defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_B1_PORT.select &=
		~(USCI_B1_SOMI_PIN | USCI_B1_SIMO_PIN | USCI_B1_STE_PIN |
		USCI_B1_CLK_PIN);

	// Clear io register select_2 bits
	USCI_B1_PORT.select_2 &=
		~(USCI_B1_SOMI_PIN | USCI_B1_SIMO_PIN | USCI_B1_STE_PIN |
		USCI_B1_CLK_PIN);

	// Set io register select bits
	USCI_B1_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_B1_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_B1_PORT.select &=
		~(USCI_B1_SOMI_PIN | USCI_B1_SIMO_PIN | USCI_B1_STE_PIN |
		USCI_B1_CLK_PIN);

	// Set io register select bits
	USCI_B1_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_B1_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_B1_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_B1_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_B1_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_B1_CONTROL.control_0 |= (*USCI_config).bit_order;

	// Clear USCI clock source selection
	USCI_B1_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_B1_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_B1_CONTROL.baud_rate_control_0 = (0x00FF & (*USCI_config).baud_rate_control);
	USCI_B1_CONTROL.baud_rate_control_1 = ((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

#if defined (__MSP430_HAS_USCI_AB1__)
	// Clear USCI interrupt enable bits
	USCI_B1_INTERRUPT.Ax_Bx_interrupt_flag &= ~(USCI_B1_TX_IE_BIT | USCI_B1_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_B1_INTERRUPT.Ax_Bx_interrupt_enable &= ~(USCI_B1_TX_IE_BIT | USCI_B1_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_B1_INTERRUPT.Ax_Bx_interrupt_enable |= (*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_B1__)
	// Clear USCI interrupt enable bits
	USCI_B1_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_B1_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_B1_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_B1_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_B1_enable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB1__)
	USCI_B1_INTERRUPT.enable_2 |= USCI_B1_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_B1__)
	USCI_B1_CONTROL.interrupt_enable |= USCI_B1_TX_IE_BIT;
#endif
}


void USCI_B1_disable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB1__)
	USCI_B1_INTERRUPT.enable_2 &= ~USCI_B1_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_B1__)
	USCI_B1_CONTROL.interrupt_enable &= ~USCI_B1_TX_IE_BIT;
#endif
}


void USCI_B1_enable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB1__)
	USCI_B1_INTERRUPT.enable_2 |= USCI_B1_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_B1__)
	USCI_B1_CONTROL.interrupt_enable |= USCI_B1_RX_IE_BIT;
#endif
}


void USCI_B1_disable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB1__)
	USCI_B1_INTERRUPT.enable_2 &= ~USCI_B1_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_B1__)
	USCI_B1_CONTROL.interrupt_enable &= ~USCI_B1_RX_IE_BIT;
#endif
}


void USCI_B1_clear_TX_interrupt_flag (void)
{
#if defined (__MSP430_HAS_USCI_AB1__)
	USCI_B1_INTERRUPT.flag_2 &= ~USCI_B1_TX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_B1__)
	USCI_B1_CONTROL.interrupt_flag &= ~USCI_B1_TX_INTERRUPT_FLAG;
#endif
}


void USCI_B1_clear_RX_interrupt_flag (void)
{
#if defined (__MSP430_HAS_USCI_AB1__)
	USCI_B1_INTERRUPT.flag_2 &= ~USCI_B1_RX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_B1__)
	USCI_B1_CONTROL.interrupt_flag &= ~USCI_B1_RX_INTERRUPT_FLAG;
#endif
}


void USCI_B1_write_TX_buffer (uint8_t data)
{
	USCI_B1_CONTROL.transmit_buffer = data;
}


uint8_t USCI_B1_read_RX_buffer (void)
{
	uint8_t data;

	data = USCI_B1_CONTROL.receive_buffer;
	return data;
}


uint8_t USCI_B1_read_busy_flag (void)
{
	uint8_t flag;

	flag = USCI_B1_CONTROL.status_register & USCI_B1_BUSY_FLAG;
	return flag;
}
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B1 Function Definitions										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B2 Function Definitions											 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B2__) || defined (__MSP430_HAS_USCI_AB2__)
#if defined (__USING_USCI_B2__) || defined (__USING_USCI_AB2__)
void USCI_B2_init (uint8_t mode, void* USCI_config)
{
	switch(mode)
	{
		case USCI_I2C_MODE:
			USCI_B2_init_I2C_mode((USCI_Bx_I2C_config_t*)USCI_config);
			break;
		case USCI_SPI_MODE:
			USCI_B2_init_SPI_mode((USCI_Bx_SPI_config_t*)USCI_config);
			break;
		default:
			// Use assert.h here to raise a warning that an invalid mode has been specified.
			_NOP();
	}
}


void USCI_B2_init_I2C_mode (USCI_Bx_I2C_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_B2_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430F5438__) || defined (__MSP430F5438A__)
	// Clear io register select bits
	USCI_B2_PORT.select &= ~(USCI_B2_SCL_PIN | USCI_B2_SDA_PIN);

	// Set io register select bits
	USCI_B2_PORT.select |= (*USCI_config).IO_pins;
#elif defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_B2_PORT.select &= ~(USCI_B2_SCL_PIN | USCI_B2_SDA_PIN);

	// Clear io register select_2 bits
	USCI_B2_PORT.select_2 &= ~(USCI_B2_SCL_PIN | USCI_B2_SDA_PIN);

	// Set io register select bits
	USCI_B2_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_B2_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_B2_PORT.select &= ~(USCI_B2_SCL_PIN | USCI_B2_SDA_PIN);

	// Set io register select bits
	USCI_B2_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_B2_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_B2_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_B2_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_B2_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_B2_CONTROL.control_0 |= (*USCI_config).bit_order;

	// Clear USCI clock source selection
	USCI_B2_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_B2_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_B2_CONTROL.baud_rate_control_0 =
		(0x00FF & (*USCI_config).baud_rate_control);
	USCI_B2_CONTROL.baud_rate_control_1 =
		((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

#if defined (__MSP430_HAS_USCI_AB2__)
	// Clear USCI interrupt enable bits
	USCI_B2_INTERRUPT.Ax_Bx_interrupt_flag &=
		~(USCI_B2_TX_IE_BIT | USCI_B2_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_B2_INTERRUPT.Ax_Bx_interrupt_enable &=
		~(USCI_B2_TX_IE_BIT | USCI_B2_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_B2_INTERRUPT.Ax_Bx_interrupt_enable |=
		(*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_B2__)
	// Clear USCI interrupt enable bits
	USCI_B2_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_B2_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_B2_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_B2_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_B2_init_SPI_mode (USCI_Bx_SPI_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_B2_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_B2_PORT.select &=
		~(USCI_B2_SOMI_PIN | USCI_B2_SIMO_PIN | USCI_B2_STE_PIN |
		USCI_B2_CLK_PIN);

	// Clear io register select_2 bits
	USCI_B2_PORT.select_2 &=
		~(USCI_B2_SOMI_PIN | USCI_B2_SIMO_PIN | USCI_B2_STE_PIN |
		USCI_B2_CLK_PIN);

	// Set io register select bits
	USCI_B2_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_B2_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_B2_PORT.select &=
		~(USCI_B2_SOMI_PIN | USCI_B2_SIMO_PIN | USCI_B2_STE_PIN |
		USCI_B2_CLK_PIN);

	// Set io register select bits
	USCI_B2_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_B2_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_B2_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_B2_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_B2_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_B2_CONTROL.control_0 |= (*USCI_config).bit_order;

	// Clear USCI clock source selection
	USCI_B2_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_B2_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_B2_CONTROL.baud_rate_control_0 =
		(0x00FF & (*USCI_config).baud_rate_control);
	USCI_B2_CONTROL.baud_rate_control_1 =
		((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

#if defined (__MSP430_HAS_USCI_AB2__)
	// Clear USCI interrupt enable bits
	USCI_B2_INTERRUPT.Ax_Bx_interrupt_flag &=
		~(USCI_B2_TX_IE_BIT | USCI_B2_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_B2_INTERRUPT.Ax_Bx_interrupt_enable &=
		~(USCI_B2_TX_IE_BIT | USCI_B2_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_B2_INTERRUPT.Ax_Bx_interrupt_enable |=
		(*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_B2__)
	// Clear USCI interrupt enable bits
	USCI_B2_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_B2_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_B2_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_B2_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_B2_enable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB2__)
	USCI_B2_INTERRUPT.enable_2 |= USCI_B2_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A2__)
	USCI_B2_CONTROL.interrupt_enable |= USCI_B2_TX_IE_BIT;
#endif
}


void USCI_B2_disable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB2__)
	USCI_B2_INTERRUPT.enable_2 &= ~USCI_B2_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A2__)
	USCI_B2_CONTROL.interrupt_enable &= ~USCI_B2_TX_IE_BIT;
#endif
}


void USCI_B2_enable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB2__)
	USCI_B2_INTERRUPT.enable_2 |= USCI_B2_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A2__)
	USCI_B2_CONTROL.interrupt_enable |= USCI_B2_RX_IE_BIT;
#endif
}


void USCI_B2_disable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB2__)
	USCI_B2_INTERRUPT.enable_2 &= ~USCI_B2_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A2__)
	USCI_B2_CONTROL.interrupt_enable &= ~USCI_B2_RX_IE_BIT;
#endif
}


void USCI_B2_clear_TX_interrupt_flag (void)
{
#if defined (__MSP430_HAS_USCI_AB2__)
	USCI_B2_INTERRUPT.flag_2 &= ~USCI_B2_TX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_A2__)
	USCI_B2_CONTROL.interrupt_flag &= ~USCI_B2_TX_INTERRUPT_FLAG;
#endif
}


void USCI_B2_clear_RX_interrupt_flag (void)
{
#if defined (__MSP430_HAS_USCI_AB2__)
	USCI_B2_INTERRUPT.flag_2 &= ~USCI_B2_RX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_A2__)
	USCI_B2_CONTROL.interrupt_flag &= ~USCI_B2_RX_INTERRUPT_FLAG;
#endif
}


void USCI_B2_write_TX_buffer (uint8_t data)
{
	USCI_B2_CONTROL.transmit_buffer = data;
}


uint8_t USCI_B2_read_RX_buffer (void)
{
	uint8_t data;

	data = USCI_B2_CONTROL.receive_buffer;
	return data;
}


uint8_t USCI_B2_read_busy_flag (void)
{
	uint8_t flag;

	flag = USCI_B2_CONTROL.status_register & USCI_B2_BUSY_FLAG;
	return flag;
}
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B2 Function Definitions										 */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*	USCI_B3 Function Definitions											 */
/*                                                                           */
/*****************************************************************************/
#if defined (__MSP430_HAS_USCI_B3__) || defined (__MSP430_HAS_USCI_AB3__)
#if defined (__USING_USCI_B3__) || defined (__USING_USCI_AB3__)
void USCI_B3_init (uint8_t mode, void* USCI_config)
{
	switch(mode)
	{
		case USCI_I2C_MODE:
			USCI_B3_init_I2C_mode((USCI_Bx_I2C_config_t*)USCI_config);
			break;
		case USCI_SPI_MODE:
			USCI_B3_init_SPI_mode((USCI_Bx_SPI_config_t*)USCI_config);
			break;
		default:
			// Use assert.h here to raise a warning that an invalid mode has been specified.
			_NOP();
	}
}


void USCI_B3_init_I2C_mode (USCI_Bx_I2C_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_B3_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430F5438__) || defined (__MSP430F5438A__)
	// Clear io register select bits
	USCI_B3_PORT.select &= ~(USCI_B3_SCL_PIN | USCI_B3_SDA_PIN);

	// Set io register select bits
	USCI_B3_PORT.select |= (*USCI_config).IO_pins;
#elif defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_B3_PORT.select &= ~(USCI_B3_SCL_PIN | USCI_B3_SDA_PIN);

	// Clear io register select_2 bits
	USCI_B3_PORT.select_2 &= ~(USCI_B3_SCL_PIN | USCI_B3_SDA_PIN);

	// Set io register select bits
	USCI_B3_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_B3_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_B3_PORT.select &= ~(USCI_B3_SCL_PIN | USCI_B3_SDA_PIN);

	// Set io register select bits
	USCI_B3_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_B3_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_B3_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_B3_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_B3_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_B3_CONTROL.control_0 |= (*USCI_config).bit_order;

	// Clear USCI clock source selection
	USCI_B3_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_B3_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_B3_CONTROL.baud_rate_control_0 =
		(0x00FF & (*USCI_config).baud_rate_control);
	USCI_B3_CONTROL.baud_rate_control_1 =
		((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

#if defined (__MSP430_HAS_USCI_AB3__)
	// Clear USCI interrupt enable bits
	USCI_B3_INTERRUPT.Ax_Bx_interrupt_flag &=
		~(USCI_B3_TX_IE_BIT | USCI_B3_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_B3_INTERRUPT.Ax_Bx_interrupt_enable &=
		~(USCI_B3_TX_IE_BIT | USCI_B3_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_B3_INTERRUPT.Ax_Bx_interrupt_enable |=
		(*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_B3__)
	// Clear USCI interrupt enable bits
	USCI_B3_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_B3_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_B3_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_B3_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_B3_init_SPI_mode (USCI_Bx_SPI_config_t* USCI_config)
{
	// Put USCI in reset state
	USCI_B3_CONTROL.control_1 |= UCSWRST;

#if defined (__MSP430G2xx__)
	// Clear io register select bits
	USCI_B3_PORT.select &=
		~(USCI_B3_SOMI_PIN | USCI_B3_SIMO_PIN | USCI_B3_STE_PIN |
		USCI_B3_CLK_PIN);

	// Clear io register select_2 bits
	USCI_B3_PORT.select_2 &=
		~(USCI_B3_SOMI_PIN | USCI_B3_SIMO_PIN | USCI_B3_STE_PIN |
		USCI_B3_CLK_PIN);

	// Set io register select bits
	USCI_B3_PORT.select |= (*USCI_config).IO_pins;

	// Set io register select_2 bits
	USCI_B3_PORT.select_2 |= (*USCI_config).IO_pins;
#else
	// Clear io register select bits
	USCI_B3_PORT.select &=
		~(USCI_B3_SOMI_PIN | USCI_B3_SIMO_PIN | USCI_B3_STE_PIN |
		USCI_B3_CLK_PIN);

	// Set io register select bits
	USCI_B3_PORT.select |= (*USCI_config).IO_pins;
#endif /* defined (__MSP430F5438__) || defined (__MSP430F5438A__) */
	// Clear USCI control_0 register bits
	USCI_B3_CONTROL.control_0 = 0;

	// Configure USCI control_0 register bits
	USCI_B3_CONTROL.control_0 |= (*USCI_config).synchronous_mode_enable;
	USCI_B3_CONTROL.control_0 |= (*USCI_config).USCI_mode;
	USCI_B3_CONTROL.control_0 |= (*USCI_config).data_bits;
	USCI_B3_CONTROL.control_0 |= (*USCI_config).bit_order;

	// Clear USCI clock source selection
	USCI_B3_CONTROL.control_1 &= ~(UCSSEL0 | UCSSEL1);

	// Configure USCI clock source selection
	USCI_B3_CONTROL.control_1 |= (*USCI_config).clock_source;

	// Configure baud rate control registers
	USCI_B3_CONTROL.baud_rate_control_0 =
		(0x00FF & (*USCI_config).baud_rate_control);
	USCI_B3_CONTROL.baud_rate_control_1 =
		((0xFF00 & (*USCI_config).baud_rate_control) >> 8);

#if defined (__MSP430_HAS_USCI_AB3__)
	// Clear USCI interrupt enable bits
	USCI_B3_INTERRUPT.Ax_Bx_interrupt_flag &=
		~(USCI_B3_TX_IE_BIT | USCI_B3_RX_IE_BIT);

	// Clear USCI interrupt flag bits
	USCI_B3_INTERRUPT.Ax_Bx_interrupt_enable &=
		~(USCI_B3_TX_IE_BIT | USCI_B3_RX_IE_BIT);

	// Enable USCI interrupts
	USCI_B3_INTERRUPT.Ax_Bx_interrupt_enable |=
		(*USCI_config).interrupt_enable;
#elif defined (__MSP430_HAS_USCI_B3__)
	// Clear USCI interrupt enable bits
	USCI_B3_CONTROL.interrupt_enable = 0;

	// Clear USCI interrupt flag bits
	USCI_B3_CONTROL.interrupt_flag = 0;

	// Enable USCI interrupts
	USCI_B3_CONTROL.interrupt_enable |= (*USCI_config).interrupt_enable;
#endif

	// Release USCI from reset and initialize
	USCI_B3_CONTROL.control_1 &= ~UCSWRST;
}


void USCI_B3_enable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB3__)
	USCI_B3_INTERRUPT.enable_2 |= USCI_B3_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A3__)
	USCI_B3_CONTROL.interrupt_enable |= USCI_B3_TX_IE_BIT;
#endif
}


void USCI_B3_disable_TX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB3__)
	USCI_B3_INTERRUPT.enable_2 &= ~USCI_B3_TX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A3__)
	USCI_B3_CONTROL.interrupt_enable &= ~USCI_B3_TX_IE_BIT;
#endif
}


void USCI_B3_enable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB3__)
	USCI_B3_INTERRUPT.enable_2 |= USCI_B3_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A3__)
	USCI_B3_CONTROL.interrupt_enable |= USCI_B3_RX_IE_BIT;
#endif
}


void USCI_B3_disable_RX_interrupt (void)
{
#if defined (__MSP430_HAS_USCI_AB3__)
	USCI_B3_INTERRUPT.enable_2 &= ~USCI_B3_RX_IE_BIT;
#elif defined (__MSP430_HAS_USCI_A3__)
	USCI_B3_CONTROL.interrupt_enable &= ~USCI_B3_RX_IE_BIT;
#endif
}


void USCI_B3_clear_TX_interrupt_flag (void)
{
#if defined (__MSP430_HAS_USCI_AB3__)
	USCI_B3_INTERRUPT.flag_2 &= ~USCI_B3_TX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_A3__)
	USCI_B3_CONTROL.interrupt_flag &= ~USCI_B3_TX_INTERRUPT_FLAG;
#endif
}


void USCI_B3_clear_RX_interrupt_flag (void)
{
#if defined (__MSP430_HAS_USCI_AB3__)
	USCI_B3_INTERRUPT.flag_2 &= ~USCI_B3_RX_INTERRUPT_FLAG;
#elif defined (__MSP430_HAS_USCI_A3__)
	USCI_B3_CONTROL.interrupt_flag &= ~USCI_B3_RX_INTERRUPT_FLAG;
#endif
}


void USCI_B3_write_TX_buffer (uint8_t data)
{
	USCI_B3_CONTROL.transmit_buffer = data;
}


uint8_t USCI_B3_read_RX_buffer (void)
{
	uint8_t data;

	data = USCI_B3_CONTROL.receive_buffer;
	return data;
}


uint8_t USCI_B3_read_busy_flag (void)
{
	uint8_t flag;

	flag = USCI_B3_CONTROL.status_register & USCI_B3_BUSY_FLAG;
	return flag;
}
#endif /* __USING_USCI_xxx__ */
#endif /* __MSP430_HAS_USCI_xxx__ */
/*****************************************************************************/
/*                                                                           */
/*	END: USCI_B3 Function Definitions										 */
/*                                                                           */
/*****************************************************************************/
/*****************************************************************************/
//	End Function Definitions


/*
USCI_t USCI_A0 = {
	(uint8_t*)(USCI_A0_PORT_INPUT_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_PORT_OUTPUT_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_PORT_DIRECTION_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_PORT_INTERRUPT_FLAG_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_PORT_INTERRUPT_EDGE_SELECT_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_PORT_INTERRUPT_ENABLE_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_PORT_SELECT_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_PORT_SELECT_REGISTER_2_ADDRESS),
	(uint8_t*)(USCI_A0_PORT_RESISTOR_ENABLE_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_INTERRUPT_ENABLE_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_INTERRUPT_FLAG_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_AUTO_BAUD_CONTROL_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_IRDA_TX_CONTROL_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_IRDA_RX_CONTROL_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_CONTROL_REGISTER_0_ADDRESS),
	(uint8_t*)(USCI_A0_CONTROL_REGISTER_1_ADDRESS),
	(uint8_t*)(USCI_A0_BAUD_RATE_CONTROL_REGISTER_0_ADDRESS),
	(uint8_t*)(USCI_A0_BAUD_RATE_CONTROL_REGISTER_1_ADDRESS),
	(uint8_t*)(USCI_A0_MODULATION_CONTROL_REGISTER_REGISTER),
	(uint8_t*)(USCI_A0_STATUS_REGISTER_ADDRESS),
	(uint8_t*)(USCI_A0_RX_BUF_ADDRESS),
	(uint8_t*)(USCI_A0_TX_BUF_ADDRESS)
};
*/
